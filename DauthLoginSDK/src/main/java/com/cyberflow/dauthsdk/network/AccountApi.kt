/**
* dauthwallet
* 账号注册，登录，授权接口
*
* OpenAPI spec version: v1.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package com.cyberflow.dauthsdk.network

import com.cyberflow.dauthsdk.infrastructure.*
import com.cyberflow.dauthsdk.model.AccountRes
import com.cyberflow.dauthsdk.model.AuthorizeParam
import com.cyberflow.dauthsdk.model.AuthorizeRes
import com.cyberflow.dauthsdk.model.AuthorizeToken2Param
import com.cyberflow.dauthsdk.model.AuthorizeToken2Res
import com.cyberflow.dauthsdk.model.BindAcoountParam
import com.cyberflow.dauthsdk.model.BindEmailParam
import com.cyberflow.dauthsdk.model.BindPhoneParam
import com.cyberflow.dauthsdk.model.BindRealInfoParam
import com.cyberflow.dauthsdk.model.CreateAccountParam
import com.cyberflow.dauthsdk.model.CreateAccountRes
import com.cyberflow.dauthsdk.model.GetAcccountInfoParam
import com.cyberflow.dauthsdk.model.GetAcccountInfoRes
import com.cyberflow.dauthsdk.model.LoginAuthParam
import com.cyberflow.dauthsdk.model.LoginAuthRes
import com.cyberflow.dauthsdk.model.LoginParam
import com.cyberflow.dauthsdk.model.LoginRes
import com.cyberflow.dauthsdk.model.LogoutParam
import com.cyberflow.dauthsdk.model.MiniAccountRealInfoRes
import com.cyberflow.dauthsdk.model.QueryByAccountParam
import com.cyberflow.dauthsdk.model.QueryByEMailParam
import com.cyberflow.dauthsdk.model.QueryByPhoneParam
import com.cyberflow.dauthsdk.model.QueryRealInfoParam
import com.cyberflow.dauthsdk.model.RefreshTokenParam
import com.cyberflow.dauthsdk.model.RefreshTokenParamRes
import com.cyberflow.dauthsdk.model.ResetByPasswordParam
import com.cyberflow.dauthsdk.model.SendEmailVerifyCodeParam
import com.cyberflow.dauthsdk.model.SendPhoneVerifyCodeParam
import com.cyberflow.dauthsdk.model.TokenAuthenticationParam
import com.cyberflow.dauthsdk.model.TokenAuthenticationRes
import com.cyberflow.dauthsdk.model.UnbindEmailParam
import com.cyberflow.dauthsdk.model.UnbindPhoneParam
import com.cyberflow.dauthsdk.model.UpdateBaseInfoParam
import com.cyberflow.dauthsdk.utils.DAuthLogger


private const val BASE_URL = "https://dauth-test.mimo.immo"
private const val CLIENT_ID = "e2fc714c4727ee9395f324cd2e7f331f"
private const val CLIENT_SECRET = "4657*@cde"
class AccountApi(basePath: String = BASE_URL) : ApiClient(basePath) {

    /**
    * 第三方认证登录，返回临时 code
    * 
    * @param body  下面authorize和token 接口，需要严格按照oauth协议标准定义字段, Oauth2 request authorize 
    * @return AuthorizeRes
    */
    @Suppress("UNCHECKED_CAST")
    fun authorize(body: AuthorizeParam) : AuthorizeRes {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/sociallogin/auth",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<AuthorizeRes>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as AuthorizeRes
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * app第三方认证登录
    *
    * @param body  
    * @return AuthorizeToken2Res
    */
    @Suppress("UNCHECKED_CAST")
    fun authorizeExchangedToken(body: AuthorizeToken2Param) : AuthorizeToken2Res? {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()

        val contentHeaders: Map<String,String> = mapOf("client_id" to CLIENT_ID)
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/sociallogin/exchangedtoken",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<AuthorizeToken2Res>(
            localVariableConfig,
            localVariableBody
        )
        DAuthLogger.e("接口参数：$localVariableBody")
        val responseData = (response as Success<*>).data
        if(responseData.toString().isNotEmpty() && responseData.toString() != "null") {
            return (response as Success<*>).data as AuthorizeToken2Res
        } else {
            DAuthLogger.e("接口请求失败")
        }
        return null
    }

    /**
    * 绑定子账号
    * 
    * @param body  
    * @return Any
    */
    @Suppress("UNCHECKED_CAST")
    fun bindAccount(body: BindAcoountParam) : Any {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/bind",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 绑定邮箱
    * 
    * @param body  
    * @return Any
    */
    @Suppress("UNCHECKED_CAST")
    fun bindEmail(body: BindEmailParam) : Any {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/email/bind",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 绑定手机号
    * 
    * @param body  
    * @return Any
    */
    @Suppress("UNCHECKED_CAST")
    fun bindPhone(body: BindPhoneParam) : Any {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/phone/bind",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 绑定用户真实信息
    * 
    * @param body  
    * @return Any
    */
    @Suppress("UNCHECKED_CAST")
    fun bindRealInfo(body: BindRealInfoParam) : Any {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/realinfo/bind",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 注册创建账号,当设置is_login时，返回临时code
    * 
    * @param body  
    * @return CreateAccountRes
    */
    @Suppress("UNCHECKED_CAST")
    fun createAccount(body: CreateAccountParam) : CreateAccountRes? {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        DAuthLogger.e("加密后所有参数：${localVariableBody.toString()}")
        val contentHeaders:  Map<String,String> = mapOf("client_id" to CLIENT_ID)
        val platformHeaders:  Map<String,String> = mapOf("platform" to "android")
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(platformHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<CreateAccountRes>(
            localVariableConfig,
            localVariableBody
        )

        DAuthLogger.e("接口参数：$localVariableBody")
        val responseData = (response as Success<*>).data
        if(responseData != null && responseData.toString() != "null") {
            return (response as? Success<*>)?.data as? CreateAccountRes
        } else {
            DAuthLogger.e("接口请求失败")
        }
        return null
    }




    /**
    * 获取用户信息
    * 
    * @param body  
    * @return AuthorizeToken2Res
    */
    @Suppress("UNCHECKED_CAST")
    fun getUserInfo(body: AuthorizeToken2Param) : AuthorizeToken2Res {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/get_user_info",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<AuthorizeToken2Res>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as AuthorizeToken2Res
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 用户profile信息,给appserver 获取用户信息
    * 
    * @param body  
    * @return GetAcccountInfoRes
    */
    @Suppress("UNCHECKED_CAST")
    fun getAccountInfo(body: GetAcccountInfoParam) : GetAcccountInfoRes {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/getacccountinfo",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<GetAcccountInfoRes>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GetAcccountInfoRes
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * (邮箱、自定义账号、手机号)账号登录验证，返回登录凭证SessionID
    * 
    * @param body  
    * @return LoginRes
    */
    @Suppress("UNCHECKED_CAST")
    fun login(body: LoginParam) : LoginRes {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/login",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<LoginRes>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as LoginRes
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * (邮箱、自定义账号、手机号)认证登录，返回临时 code
    * 
    * @param body  
    * @return LoginAuthRes
    */
    @Suppress("UNCHECKED_CAST")
    fun loginAuth(body: LoginAuthParam) : LoginAuthRes {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/login/auth",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<LoginAuthRes>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as LoginAuthRes
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 账号退出，包括第三方账号退出
    * 
    * @param body  
    * @return Any
    */
    @Suppress("UNCHECKED_CAST")
    fun logout(body: LogoutParam) : Any {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/logout",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 根据账号查询用户信息
    * 
    * @param body  
    * @return AccountRes
    */
    @Suppress("UNCHECKED_CAST")
    fun queryByAccountNum(body: QueryByAccountParam) : AccountRes {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/userinfo/query",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<AccountRes>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as AccountRes
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 根据邮箱查询用户
    * 
    * @param body  
    * @return AccountRes
    */
    @Suppress("UNCHECKED_CAST")
    fun queryByEMail(body: QueryByEMailParam) : AccountRes {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/userinfo/email/query",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<AccountRes>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as AccountRes
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 根据手机号查询用户
    * 
    * @param body  
    * @return AccountRes
    */
    @Suppress("UNCHECKED_CAST")
    fun queryByPhone(body: QueryByPhoneParam) : AccountRes {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/userinfo/phone/query",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<AccountRes>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as AccountRes
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 获取用户真实信息
    * 
    * @param body  
    * @return MiniAccountRealInfoRes
    */
    @Suppress("UNCHECKED_CAST")
    fun queryRealInfo(body: QueryRealInfoParam) : MiniAccountRealInfoRes {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/realinfo/query",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<MiniAccountRealInfoRes>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as MiniAccountRealInfoRes
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 刷新access_token
    * 
    * @param body  
    * @return RefreshTokenParamRes
    */
    @Suppress("UNCHECKED_CAST")
    fun refreshToken(body: RefreshTokenParam) : RefreshTokenParamRes {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/refresh_token",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<RefreshTokenParamRes>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as RefreshTokenParamRes
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 重置密码
    * 
    * @param body  
    * @return Any
    */
    @Suppress("UNCHECKED_CAST")
    fun resetByPassword(body: ResetByPasswordParam) : Any {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/password/reset",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 发送邮件验证码
    * 
    * @param body  
    * @return Any
    */
    @Suppress("UNCHECKED_CAST")
    fun sendEmailVerifyCode(body: SendEmailVerifyCodeParam) : Any {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/emailverifycode/send",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 发送手机短信验证码
    * 
    * @param body  
    * @return Any
    */
    @Suppress("UNCHECKED_CAST")
    fun sendPhoneVerifyCode(body: SendPhoneVerifyCodeParam) : Any {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/phoneverifycode/send",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 账号认证,给appserver 做临时code校验, 并返回access token
    * 
    * @param body  Oauth2 request access token 
    * @return TokenAuthenticationRes
    */
    @Suppress("UNCHECKED_CAST")
    fun tokenAuthentication(body: TokenAuthenticationParam) : TokenAuthenticationRes {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/token",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<TokenAuthenticationRes>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as TokenAuthenticationRes
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 邮箱解绑
    * 
    * @param body  
    * @return Any
    */
    @Suppress("UNCHECKED_CAST")
    fun unbindEmail(body: UnbindEmailParam) : Any {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/mail/unbind",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 手机号解绑
    * 
    * @param body  
    * @return Any
    */
    @Suppress("UNCHECKED_CAST")
    fun unbindPhone(body: UnbindPhoneParam) : Any {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/phone/unbind",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 更新用户信息
    * 
    * @param body  
    * @return Any
    */
    @Suppress("UNCHECKED_CAST")
    fun updateBaseInfo(body: UpdateBaseInfoParam) : Any {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/baseinfo/update",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

}
