/**
* dauthwallet
* 账号注册，登录，授权接口
*
* OpenAPI spec version: v1.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package com.cyberflow.dauthsdk.network

import com.cyberflow.dauthsdk.infrastructure.*
import com.cyberflow.dauthsdk.model.*
import com.cyberflow.dauthsdk.utils.DAuthLogger
import com.google.gson.Gson


private const val BASE_URL = "https://dauth-test.mimo.immo"
private const val CLIENT_ID = "e2fc714c4727ee9395f324cd2e7f331f"
private const val CLIENT_SECRET = "4657*@cde"
class RequestApi(basePath: String = BASE_URL) : ApiClient(basePath) {

    private fun setCommonParams(url: String): RequestConfig {
        val localVariableQuery: MultiValueMap = mapOf()
        val contentHeaders: Map<String, String> = mapOf("client_id" to CLIENT_ID)
        val acceptsHeaders: Map<String, String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)

        return RequestConfig(
            RequestMethod.POST,
            url,
            query = localVariableQuery,
            headers = localVariableHeaders
        )

    }

    /**
    * 第三方认证登录，返回临时 code
    * 
    * @param body  下面authorize和token 接口，需要严格按照oauth协议标准定义字段, Oauth2 request authorize 
    * @return AuthorizeRes
    */
    @Suppress("UNCHECKED_CAST")
    fun authorize(body: AuthorizeParam) : AuthorizeRes? {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/sociallogin/auth",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<AuthorizeRes>(
            localVariableConfig,
            localVariableBody
        )

        if(response.statusCode == 200) {

        } else {
            DAuthLogger.e("sociallogin/auth return errorCode==${response.statusCode}")
        }
        return null
    }

    /**
    * app第三方认证登录
    *
    * @param body  
    * @return AuthorizeToken2Res
    */
    @Suppress("UNCHECKED_CAST")
    fun authorizeExchangedToken(body: AuthorizeToken2Param) : AuthorizeToken2Res? {

        val localVariableConfig = setCommonParams("/account/v1/sociallogin/exchangedtoken")
        val response = request<AuthorizeToken2Res>(
            localVariableConfig,
            body
        )
        DAuthLogger.e("接口参数：$body")
        if (response.statusCode == 200) {
            val responseData = (response as Success<*>).data
            if (responseData.toString().isNotEmpty() && responseData.toString() != "null") {
                return (response as Success<*>).data as AuthorizeToken2Res
            } else {
                DAuthLogger.e("接口请求失败")
            }
        } else {
            DAuthLogger.e("接口请求失败 errorCode : ${response.statusCode}")
        }
        return null
    }



    /**
    * 绑定子账号
    * 
    * @param body  
    * @return Any
    */
    @Suppress("UNCHECKED_CAST")
    fun bindAccount(body: BindAcoountParam) : Any? {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/bind",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any>(
            localVariableConfig,
            localVariableBody
        )
        val statusCode = response.statusCode
        if(statusCode == 200) {
            val data = (response as Success<*>).data
            if(data.toString().isEmpty()) {
                DAuthLogger.e("bindAccount return data is null")
            } else {
                return data
            }
        } else {
            DAuthLogger.e("bindAccount return errorCode == $statusCode")
        }

      return null
    }

    /**
    * 绑定邮箱
    * 
    * @param body  
    * @return Any
    */
    @Suppress("UNCHECKED_CAST")
    fun bindEmail(body: BindEmailParam) : Any {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/email/bind",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 绑定手机号
    * 
    * @param body  
    * @return Any
    */
    @Suppress("UNCHECKED_CAST")
    fun bindPhone(body: BindPhoneParam) : Any {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/phone/bind",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 绑定用户真实信息
    * 
    * @param body  
    * @return Any
    */
    @Suppress("UNCHECKED_CAST")
    fun bindRealInfo(body: BindRealInfoParam) : Any {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/realinfo/bind",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 注册创建账号,当设置is_login时，返回临时code
    * 
    * @param body  
    * @return CreateAccountRes
    */
    @Suppress("UNCHECKED_CAST")
    fun createAccount(body: CreateAccountParam): CreateAccountRes? {

        val localVariableConfig = setCommonParams("/account/v1/create")
        val response = request<CreateAccountRes>(
            localVariableConfig,
            body
        )

        DAuthLogger.e("接口参数：$body")
        if (response.responseType == ResponseType.Success) {
            val responseData = (response as Success<*>).data
            if (responseData != null && responseData.toString() != "null") {
                return (response as? Success<*>)?.data as? CreateAccountRes
            } else {
                DAuthLogger.e("接口请求失败")
            }
        } else {
            DAuthLogger.e("接口请求失败 errorCode: ${response.statusCode}")
        }
        return null
    }


    /**
    * 获取用户信息
    * 
    * @param body  
    * @return AuthorizeToken2Res
    */
    @Suppress("UNCHECKED_CAST")
    fun getUserInfo(body: AuthorizeToken2Param) : AuthorizeToken2Res {

        val localVariableConfig = setCommonParams("/account/v1/get_user_info")
        val response = request<AuthorizeToken2Res>(
            localVariableConfig,
            body
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as AuthorizeToken2Res
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 用户profile信息,给appserver 获取用户信息
    * 
    * @param body  
    * @return GetAcccountInfoRes
    */
    @Suppress("UNCHECKED_CAST")
    fun getAccountInfo(body: GetAcccountInfoParam) : GetAcccountInfoRes {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/getacccountinfo",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<GetAcccountInfoRes>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GetAcccountInfoRes
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * (邮箱、自定义账号、手机号)账号登录验证，返回登录凭证SessionID
    * 
    * @param body  
    * @return LoginRes
    */
    @Suppress("UNCHECKED_CAST")
    fun login(body: LoginParam): LoginRes? {
        val localVariableConfig = setCommonParams("/account/v1/login")
        val response = request<LoginRes>(
            localVariableConfig,
            body
        )

        if (response.responseType == ResponseType.Success) {
            val responseData = (response as Success<*>).data
            if (responseData != null && responseData.toString() != "null") {
                return (response as? Success<*>)?.data as? LoginRes
            } else {
                DAuthLogger.e("接口请求失败")
            }
        } else {
            DAuthLogger.e("login 接口请求失败 errorCode: ${response.statusCode}")
        }

        return null
    }

    /**
    * (邮箱、自定义账号、手机号)认证登录，返回临时 code
    * 
    * @param body  
    * @return LoginAuthRes
    */
    @Suppress("UNCHECKED_CAST")
    fun loginAuth(body: LoginAuthParam): LoginAuthRes? {
        val localVariableConfig = setCommonParams("/account/v1/login/auth")
        val response = request<LoginAuthRes>(
            localVariableConfig,
            body
        )
        if (response.responseType == ResponseType.Success) {
            val responseData = (response as Success<*>).data
            if (responseData != null && responseData.toString() != "null") {
                return (response as? Success<*>)?.data as? LoginAuthRes
            } else {
                DAuthLogger.e("loginAuth 接口请求失败")
            }
        } else {
            DAuthLogger.e("loginAuth 接口请求失败 errorCode: ${response.statusCode}")
        }
        return null
    }

    /**
    * 账号退出，包括第三方账号退出
    * 
    * @param body  
    * @return Any
    */
    @Suppress("UNCHECKED_CAST")
    fun logout(body: LogoutParam) : Any? {
        val localVariableConfig = setCommonParams("/account/v1/logout")

        val response = request<Any> (
            localVariableConfig,
            body
        )
        if(response.statusCode == 200) {
            return true
        }
       return null
    }

    /**
    * 根据账号查询用户信息
    * 
    * @param body  
    * @return AccountRes
    */
    @Suppress("UNCHECKED_CAST")
    fun queryByAccountNum(body: QueryByAccountParam): AccountRes? {

        val localVariableConfig = setCommonParams("/account/v1/userinfo/query")

        val response = request<AccountRes>(
            localVariableConfig,
            body
        )
        if (response.statusCode == 200) {
            return (response as Success<*>).data as AccountRes
        }
        return null
    }

    /**
    * 根据邮箱查询用户
    * 
    * @param body  
    * @return AccountRes
    */
    @Suppress("UNCHECKED_CAST")
    fun queryByEMail(body: QueryByEMailParam) : AccountRes? {
        val localVariableConfig = setCommonParams("/account/v1/userinfo/email/query")

        val response = request<AccountRes>(
            localVariableConfig,
            body
        )

        if (response.statusCode == 200) {
            return (response as Success<*>).data as AccountRes
        }
        return null
    }

    /**
    * 根据手机号查询用户
    * 
    * @param body  
    * @return AccountRes
    */
    @Suppress("UNCHECKED_CAST")
    fun queryByPhone(body: QueryByPhoneParam) : AccountRes? {

        val localVariableConfig = setCommonParams("/account/v1/userinfo/phone/query")

        val response = request<AccountRes>(
            localVariableConfig,
            body
        )

        if (response.statusCode == 200) {
            return (response as Success<*>).data as AccountRes
        }
        return null
    }

    /**
    * 获取用户真实信息
    * 
    * @param body  
    * @return MiniAccountRealInfoRes
    */
    @Suppress("UNCHECKED_CAST")
    fun queryRealInfo(body: QueryRealInfoParam) : MiniAccountRealInfoRes? {
        val localVariableConfig = setCommonParams("/account/v1/realinfo/query")

        val response = request<MiniAccountRealInfoRes>(
            localVariableConfig,
            body
        )

        if (response.statusCode == 200) {
            return (response as Success<*>).data as MiniAccountRealInfoRes
        }
        return null
    }

    /**
    * 刷新access_token
    * 
    * @param body  
    * @return RefreshTokenParamRes
    */
    @Suppress("UNCHECKED_CAST")
    fun refreshToken(body: RefreshTokenParam) : RefreshTokenParamRes? {

        val localVariableConfig = setCommonParams("/account/v1/refresh_token")

        val response = request<RefreshTokenParamRes>(
            localVariableConfig,
            body
        )

        if (response.statusCode == 200) {
            return (response as Success<*>).data as RefreshTokenParamRes
        }
        return null

    }

    /**
    * 重置密码
    * 
    * @param body  
    * @return Any
    */
    @Suppress("UNCHECKED_CAST")
    fun resetByPassword(body: ResetByPasswordParam) : Any? {
        val localVariableConfig = setCommonParams("/account/v1/password/reset")

        val response = request<ResetByPasswordParam>(
            localVariableConfig,
            body
        )

        if (response.statusCode == 200) {
            return (response as Success<*>).data as ResetByPasswordParam
        }
        return null
    }

    /**
    * 发送邮件验证码
    * 
    * @param body  
    * @return Any
    */
    @Suppress("UNCHECKED_CAST")
    fun sendEmailVerifyCode(body: SendEmailVerifyCodeParam) : Boolean {

        val localVariableConfig = setCommonParams("/account/v1/emailverifycode/send")
        val response = request<Any>(
            localVariableConfig,
            body
        )

        if(response.statusCode == 200 ) {
            val data = (response as? Success<*>)?.data
            val toJson = Gson().toJson(data)
            val sendEmailVerifyCode = Gson().fromJson(toJson, SendEmailVerifyCode::class.java)
            DAuthLogger.e("验证码接口返回：$data")
            if( sendEmailVerifyCode.iRet == 0) {
                return true
            }
        } else {
            DAuthLogger.e("sendEmailVerifyCode return errorCode == ${response.statusCode}")
        }
        return false
    }

    /**
    * 发送手机短信验证码
    * 
    * @param body  
    * @return Any
    */
    @Suppress("UNCHECKED_CAST")
    fun sendPhoneVerifyCode(body: SendPhoneVerifyCodeParam) : Any {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/phoneverifycode/send",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 账号认证,给appserver 做临时code校验, 并返回access token
    * 
    * @param body  Oauth2 request access token 
    * @return TokenAuthenticationRes
    */
    @Suppress("UNCHECKED_CAST")
    fun tokenAuthentication(body: TokenAuthenticationParam) : TokenAuthenticationRes {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "account/v1/oauth2/token",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<TokenAuthenticationRes>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as TokenAuthenticationRes
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 邮箱解绑
    * 
    * @param body  
    * @return Any
    */
    @Suppress("UNCHECKED_CAST")
    fun unbindEmail(body: UnbindEmailParam) : Any {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/mail/unbind",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 手机号解绑
    * 
    * @param body  
    * @return Any
    */
    @Suppress("UNCHECKED_CAST")
    fun unbindPhone(body: UnbindPhoneParam) : Any {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/phone/unbind",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 更新用户信息
    * 
    * @param body  
    * @return Any
    */
    @Suppress("UNCHECKED_CAST")
    fun updateBaseInfo(body: UpdateBaseInfoParam) : Any {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/baseinfo/update",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

}
