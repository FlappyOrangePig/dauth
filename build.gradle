// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    // Gradle will not find vars defined in an external file when referring to them
    // in the buildscript block, unless you link it from the buildscript block, too.
    apply from: 'config.gradle'
    dependencies {
        classpath 'com.github.kezong:fat-aar:1.3.6'
//        classpath 'com.google.gms:google-services:4.3.15'
    }
}

plugins {
    id 'com.android.application' version '7.4.2' apply false
    id 'com.android.library' version '7.4.2' apply false
    id 'org.jetbrains.kotlin.android' version '1.8.20' apply false
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.8.20'
}

subprojects {
    afterEvaluate { project ->
        if (project.hasProperty("android")) {
            android {
                compileSdkVersion versions.compile_sdk
                buildToolsVersion versions.build_tools
                defaultConfig {
                    minSdk versions.min_sdk
                    targetSdk versions.target_sdk
                    versionCode versions.version_code
                    vectorDrawables.useSupportLibrary = true
                    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                }
                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_1_8
                    targetCompatibility JavaVersion.VERSION_1_8
                }
                kotlinOptions { jvmTarget = '1.8' }
                buildFeatures { viewBinding = true }
                buildTypes {
                    release {
                        minifyEnabled true
                        zipAlignEnabled true
                        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                    }
                    debug {
                        minifyEnabled false
                        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                    }
                }
            }
            println("namespace=" + android.namespace)
        }

        if (project.hasProperty("android")) {
            Boolean useNdk = false
            try {
                def ndkDir = project.android.ndkDirectory;
                if (ndkDir != null) {
                    android {
                        externalNativeBuild {
                            cmake {
                                path "src/main/cpp/CMakeLists.txt"
                                version "3.26.4"
                            }
                        }
                    }
                    useNdk = true
                }
            } catch (_) {
                // _.printStackTrace()
            }
            println("ndk installed, enable ndk build:" + useNdk)
        }
    }
}

configurations.all {
    resolutionStrategy.force "com.cyberflow.dauthsdk:dauth-sdk:1.0.0-SNAPSHOT"
}
