package com.infras.dauthsdk.wallet.sol;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.0.
 */
@SuppressWarnings("rawtypes")
public class EntryPoint extends Contract {
    public static final String BINARY = "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff168152503480156200004457600080fd5b50620000556200005b60201b60201c565b62000205565b600060019054906101000a900460ff1615620000ae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a590620001a8565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff16146200011f5760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620001169190620001e8565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006200019060278362000121565b91506200019d8262000132565b604082019050919050565b60006020820190508181036000830152620001c38162000181565b9050919050565b600060ff82169050919050565b620001e281620001ca565b82525050565b6000602082019050620001ff6000830184620001d7565b92915050565b6080516147ca6200023d6000396000818161078301528181610811015281816109f701528181610a850152610b3501526147ca6000f3fe60806040526004361061011f5760003560e01c80635ff57772116100a0578063a619353111610064578063a619353114610386578063c2077116146103c3578063f2fde38b146103ec578063fb7d8a1e14610415578063ff946c6a1461043e5761011f565b80635ff57772146102db578063715018a6146103045780638129fc1c1461031b5780638da5cb5b1461033257806390ccd74e1461035d5761011f565b80633659cfe6116100e75780633659cfe61461021957806337be2ce5146102425780634f1ef2861461026b57806352d1902d14610287578063532d3ac9146102b25761011f565b8063099dd37f146101245780630bd28e3b1461014d57806316d3ffc3146101765780631b2e01b81461019f57806335567e1a146101dc575b600080fd5b34801561013057600080fd5b5061014b6004803603810190610146919061295c565b61047b565b005b34801561015957600080fd5b50610174600480360381019061016f91906129f5565b6105ad565b005b34801561018257600080fd5b5061019d60048036038101906101989190612a80565b61064a565b005b3480156101ab57600080fd5b506101c660048036038101906101c19190612aad565b6106ad565b6040516101d39190612b06565b60405180910390f35b3480156101e857600080fd5b5061020360048036038101906101fe9190612aad565b6106d2565b6040516102109190612b06565b60405180910390f35b34801561022557600080fd5b50610240600480360381019061023b9190612a80565b610781565b005b34801561024e57600080fd5b506102696004803603810190610264919061295c565b610909565b005b61028560048036038101906102809190612c67565b6109f5565b005b34801561029357600080fd5b5061029c610b31565b6040516102a99190612cdc565b60405180910390f35b3480156102be57600080fd5b506102d960048036038101906102d49190612d57565b610bea565b005b3480156102e757600080fd5b5061030260048036038101906102fd9190612e0e565b610d82565b005b34801561031057600080fd5b50610319610e2a565b005b34801561032757600080fd5b50610330610e3e565b005b34801561033e57600080fd5b50610347610f7c565b6040516103549190612e8c565b60405180910390f35b34801561036957600080fd5b50610384600480360381019061037f9190612ea7565b610fa6565b005b34801561039257600080fd5b506103ad60048036038101906103a8919061295c565b61114b565b6040516103ba9190612cdc565b60405180910390f35b3480156103cf57600080fd5b506103ea60048036038101906103e5919061295c565b611187565b005b3480156103f857600080fd5b50610413600480360381019061040e9190612a80565b6113a5565b005b34801561042157600080fd5b5061043c60048036038101906104379190612a80565b611428565b005b34801561044a57600080fd5b5061046560048036038101906104609190612f03565b61148b565b6040516104729190612b06565b60405180910390f35b60ca60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610507576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fe90612fe3565b60405180910390fd5b6000805a90503073ffffffffffffffffffffffffffffffffffffffff1663ff946c6a33600086856040518563ffffffff1660e01b815260040161054d94939291906132a8565b6020604051808303816000875af192505050801561058957506040513d601f19601f820116820180604052508101906105869190613309565b60015b610597575a8103915061059c565b809250505b6105a860008484611813565b505050565b60c960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008277ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919061064290613365565b919050555050565b6106526119ad565b600060ca60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60c9602052816000526040600020602052806000526040600020600091509150505481565b600060408277ffffffffffffffffffffffffffffffffffffffffffffffff16901b60c960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205417905092915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff160361080f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108069061341f565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661084e611a2b565b73ffffffffffffffffffffffffffffffffffffffff16146108a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089b906134b1565b60405180910390fd5b6108ad81611a82565b61090681600067ffffffffffffffff8111156108cc576108cb612b3c565b5b6040519080825280601f01601f1916602001820160405280156108fe5781602001600182028036833780820191505090505b506000611a8d565b50565b60006109148261114b565b90508160000160208101906109299190612a80565b73ffffffffffffffffffffffffffffffffffffffff16633a871cdd8360a00135848460006040518563ffffffff1660e01b815260040161096b939291906134d1565b60206040518083038160008887f115801561098a573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906109af9190613309565b6000146109f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e89061355b565b60405180910390fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1603610a83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7a9061341f565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610ac2611a2b565b73ffffffffffffffffffffffffffffffffffffffff1614610b18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0f906134b1565b60405180910390fd5b610b2182611a82565b610b2d82826001611a8d565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610bc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb8906135ed565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b60ca60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610c76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6d90612fe3565b60405180910390fd5b6000805b83839050811015610d7c5760005a90503073ffffffffffffffffffffffffffffffffffffffff1663ff946c6a3384888887818110610cbb57610cba61360d565b5b9050602002810190610ccd919061364b565b856040518563ffffffff1660e01b8152600401610ced9493929190613674565b6020604051808303816000875af1925050508015610d2957506040513d601f19601f82011682018060405250810190610d269190613309565b60015b610d37575a81039250610d39565b505b610d6882868685818110610d5057610d4f61360d565b5b9050602002810190610d62919061364b565b85611813565b508080610d7490613365565b915050610c7a565b50505050565b806000016020810190610d959190612a80565b73ffffffffffffffffffffffffffffffffffffffff16638a1bd7c084610dba84611bfb565b85610dc591906136c0565b6040518363ffffffff1660e01b8152600401610de2929190613711565b6020604051808303816000875af1158015610e01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e259190613772565b600080fd5b610e326119ad565b610e3c6000611c36565b565b60008060019054906101000a900460ff16159050808015610e6f5750600160008054906101000a900460ff1660ff16105b80610e9c5750610e7e30611cfc565b158015610e9b5750600160008054906101000a900460ff1660ff16145b5b610edb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed290613811565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610f18576001600060016101000a81548160ff0219169083151502179055505b610f20611d1f565b8015610f795760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610f709190613879565b60405180910390a15b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611014576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100b906138e0565b60405180910390fd5b8060c001358160a00135826080013561102d9190613900565b6110379190613900565b61104082611bfb565b61104a91906136c0565b81600001602081019061105d9190612a80565b73ffffffffffffffffffffffffffffffffffffffff163110156110b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ac90613980565b60405180910390fd5b6110d58160000160208101906110cb9190612a80565b8260200135611d78565b61111657816040517f220266b600000000000000000000000000000000000000000000000000000000815260040161110d91906139ec565b60405180910390fd5b6111478282600001602081019061112d9190612a80565b8360a001358480604001906111429190613a1a565b611e36565b5050565b600061115682612067565b304660405160200161116a93929190613a7d565b604051602081830303815290604052805190602001209050919050565b60005a905061119582612080565b3073ffffffffffffffffffffffffffffffffffffffff166337be2ce5836040518263ffffffff1660e01b81526004016111ce9190613ab4565b600060405180830381600087803b1580156111e857600080fd5b505af19250505080156111f9575060015b5060005a826112089190613ad6565b90505a915061121683612261565b3073ffffffffffffffffffffffffffffffffffffffff16635ff577723383866040518463ffffffff1660e01b815260040161125393929190613b0a565b600060405180830381600087803b15801561126d57600080fd5b505af192505050801561127e575060015b5060005a8361128d9190613ad6565b9050600080856040516020016112a39190613ab4565b604051602081830303815290604052905060005b815181101561133f57600060f81b8282815181106112d8576112d761360d565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19160361131e576004836113179190613900565b925061132e565b60108361132b9190613900565b92505b8061133890613365565b90506112b7565b508162014820856113509190613900565b61135a9190613900565b61a410846113689190613900565b6040517f2652b7f900000000000000000000000000000000000000000000000000000000815260040161139c929190613b48565b60405180910390fd5b6113ad6119ad565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361141c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141390613be3565b60405180910390fd5b61142581611c36565b50565b6114306119ad565b600160ca60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f290613c4f565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff166390ccd74e85856040518363ffffffff1660e01b8152600401611536929190613c6f565b600060405180830381600087803b15801561155057600080fd5b505af1925050508015611561575060015b6116145761156d613cac565b806308c379a0036116035750611581613cce565b8061158c5750611605565b83600001602081019061159f9190612a80565b73ffffffffffffffffffffffffffffffffffffffff167f4b5023f39546f246e55b2db02aad776daa69daf4f027ed6d28a672efffa77e7c6000836040516115e7929190613ddb565b60405180910390a25a836115fb9190613ad6565b91505061160f565b505b3d6000803e3d6000fd5b6117fd565b8260000160208101906116279190612a80565b73ffffffffffffffffffffffffffffffffffffffff167f4b5023f39546f246e55b2db02aad776daa69daf4f027ed6d28a672efffa77e7c600160405161166d9190613e31565b60405180910390a23073ffffffffffffffffffffffffffffffffffffffff166337be2ce5846040518263ffffffff1660e01b81526004016116ae9190613ab4565b600060405180830381600087803b1580156116c857600080fd5b505af19250505080156116d9575060015b61178c576116e5613cac565b806308c379a00361177b57506116f9613cce565b80611704575061177d565b8360000160208101906117179190612a80565b73ffffffffffffffffffffffffffffffffffffffff167fb4f28076a46f2763b5d200aaee3f34dc599d4cefb892d44e7795ef20fc25a27560008360405161175f929190613ddb565b60405180910390a25a836117739190613ad6565b915050611787565b505b3d6000803e3d6000fd5b6117fc565b82600001602081019061179f9190612a80565b73ffffffffffffffffffffffffffffffffffffffff167fb4f28076a46f2763b5d200aaee3f34dc599d4cefb892d44e7795ef20fc25a27560016040516117e59190613e31565b60405180910390a26117f683612261565b5a820390505b5b5a826118099190613ad6565b9050949350505050565b8160000160208101906118269190612a80565b73ffffffffffffffffffffffffffffffffffffffff16638a1bd7c03361184b85611bfb565b8461185691906136c0565b6040518363ffffffff1660e01b8152600401611873929190613711565b6020604051808303816000875af19250505080156118af57506040513d601f19601f820116820180604052508101906118ac9190613772565b60015b6118f057826040517f220266b60000000000000000000000000000000000000000000000000000000081526004016118e79190613eab565b60405180910390fd5b8260000160208101906119039190612a80565b73ffffffffffffffffffffffffffffffffffffffff167f0175b2ba3b91c98a418451ad272aec73aef799c568fe5515f4ed37d8cb1b278d61194385611bfb565b8461194e91906136c0565b8360405161195d929190613ed9565b60405180910390a2806119a757836040517f220266b600000000000000000000000000000000000000000000000000000000815260040161199e9190613eab565b60405180910390fd5b50505050565b6119b56123e6565b73ffffffffffffffffffffffffffffffffffffffff166119d3610f7c565b73ffffffffffffffffffffffffffffffffffffffff1614611a29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2090613f4e565b60405180910390fd5b565b6000611a597f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b6123ee565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611a8a6119ad565b50565b611ab97f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b6123f8565b60000160009054906101000a900460ff1615611add57611ad883612402565b611bf6565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611b4557506040513d601f19601f82011682018060405250810190611b429190613f9a565b60015b611b84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7b90614039565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b8114611be9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be0906140cb565b60405180910390fd5b50611bf58383836124bb565b5b505050565b6000808260e00135905060008361010001359050808203611c20578192505050611c31565b611c2c824883016124e7565b925050505b919050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611d6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d659061415d565b60405180910390fd5b611d76612500565b565b600080604083901c905060008390508067ffffffffffffffff1660c960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190611e2790613365565b91905055149250505092915050565b600082829050146120605760008473ffffffffffffffffffffffffffffffffffffffff163b14611e9d57846040517f220266b6000000000000000000000000000000000000000000000000000000008152600401611e9491906141c9565b60405180910390fd5b6000611eaa838386612561565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611f1d57856040517f220266b6000000000000000000000000000000000000000000000000000000008152600401611f149190614243565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611f8d57856040517f220266b6000000000000000000000000000000000000000000000000000000008152600401611f8491906142bd565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff163b03611fe957856040517f220266b6000000000000000000000000000000000000000000000000000000008152600401611fe09190614337565b60405180910390fd5b60008383600090601492611fff9392919061436f565b9061200a91906143ee565b60601c90508573ffffffffffffffffffffffffffffffffffffffff167f2682a218602b9036c9869f006c5405ee4a1a65267653eb7e286123e5e1afde4c826040516120559190612e8c565b60405180910390a250505b5050505050565b60006120728261260e565b805190602001209050919050565b60008180604001906120929190613a1a565b90501480156120ca575060008160000160208101906120b19190612a80565b73ffffffffffffffffffffffffffffffffffffffff163b145b1561210a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210190614499565b60405180910390fd5b8060c001358160a0013582608001356121239190613900565b61212d9190613900565b61213682611bfb565b61214091906136c0565b8160000160208101906121539190612a80565b73ffffffffffffffffffffffffffffffffffffffff163110156121ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121a290613980565b60405180910390fd5b6121cb8160000160208101906121c19190612a80565b8260200135611d78565b61220a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612201906144b9565b60405180910390fd5b600081806040019061221c9190613a1a565b90501461225e5761225c8180604001906122369190613a1a565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612561565b505b50565b60008180606001906122739190613a1a565b905011156123e35760006122f28260000160208101906122939190612a80565b60008480606001906122a59190613a1a565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505085608001356126ec565b90508061237b576000612306610800612705565b9050600081511115612379578260000160208101906123259190612a80565b73ffffffffffffffffffffffffffffffffffffffff167fbe4889eb241fb33bc0e9873f6e442f4c5dc653a55e7ad8bca2f001c9b3d818fb84602001358360405161237092919061452e565b60405180910390a25b505b81600001602081019061238e9190612a80565b73ffffffffffffffffffffffffffffffffffffffff167f548743c2fc52601b129d661d14784dfed7c1701fe8dd841f6248ea6331663c0d8360200135836040516123d9929190613ed9565b60405180910390a2505b50565b600033905090565b6000819050919050565b6000819050919050565b61240b81611cfc565b61244a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612441906145d0565b60405180910390fd5b806124777f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b6123ee565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6124c483612735565b6000825111806124d15750805b156124e2576124e08383612784565b505b505050565b60008183106124f657816124f8565b825b905092915050565b600060019054906101000a900460ff1661254f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125469061415d565b60405180910390fd5b61255f61255a6123e6565b611c36565b565b60008084846000906014926125789392919061436f565b9061258391906143ee565b60601c905060008585601490809261259d9392919061436f565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505090506000602060008351602085016000878af1905060005193508061260457600093505b5050509392505050565b6060600061261b836127b1565b9050600083602001359050600061264085806040019061263b9190613a1a565b6127c1565b9050600061265c8680606001906126579190613a1a565b6127c1565b905060008660800135905060008760a00135905060008860c00135905060008960e00135905060008a6101000135905060006126a78c8061012001906126a29190613a1a565b6127c1565b9050898989898989898989896040516020016126cc9a999897969594939291906145f0565b6040516020818303038152906040529a5050505050505050505050919050565b6000806000845160208601878987f19050949350505050565b60603d82811115612714578290505b604051602082018101604052818152816000602083013e8092505050919050565b61273e81612402565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b60606127a9838360405180606001604052806027815260200161476e602791396127d8565b905092915050565b6000808235905080915050919050565b600060405182808583378082209250505092915050565b60606000808573ffffffffffffffffffffffffffffffffffffffff168560405161280291906146c8565b600060405180830381855af49150503d806000811461283d576040519150601f19603f3d011682016040523d82523d6000602084013e612842565b606091505b50915091506128538683838761285e565b925050509392505050565b606083156128c05760008351036128b85761287885611cfc565b6128b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128ae9061472b565b60405180910390fd5b5b8290506128cb565b6128ca83836128d3565b5b949350505050565b6000825111156128e65781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161291a919061474b565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b600080fd5b6000610160828403121561295357612952612937565b5b81905092915050565b6000602082840312156129725761297161292d565b5b600082013567ffffffffffffffff8111156129905761298f612932565b5b61299c8482850161293c565b91505092915050565b600077ffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b6129d2816129a5565b81146129dd57600080fd5b50565b6000813590506129ef816129c9565b92915050565b600060208284031215612a0b57612a0a61292d565b5b6000612a19848285016129e0565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612a4d82612a22565b9050919050565b612a5d81612a42565b8114612a6857600080fd5b50565b600081359050612a7a81612a54565b92915050565b600060208284031215612a9657612a9561292d565b5b6000612aa484828501612a6b565b91505092915050565b60008060408385031215612ac457612ac361292d565b5b6000612ad285828601612a6b565b9250506020612ae3858286016129e0565b9150509250929050565b6000819050919050565b612b0081612aed565b82525050565b6000602082019050612b1b6000830184612af7565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612b7482612b2b565b810181811067ffffffffffffffff82111715612b9357612b92612b3c565b5b80604052505050565b6000612ba6612923565b9050612bb28282612b6b565b919050565b600067ffffffffffffffff821115612bd257612bd1612b3c565b5b612bdb82612b2b565b9050602081019050919050565b82818337600083830152505050565b6000612c0a612c0584612bb7565b612b9c565b905082815260208101848484011115612c2657612c25612b26565b5b612c31848285612be8565b509392505050565b600082601f830112612c4e57612c4d612b21565b5b8135612c5e848260208601612bf7565b91505092915050565b60008060408385031215612c7e57612c7d61292d565b5b6000612c8c85828601612a6b565b925050602083013567ffffffffffffffff811115612cad57612cac612932565b5b612cb985828601612c39565b9150509250929050565b6000819050919050565b612cd681612cc3565b82525050565b6000602082019050612cf16000830184612ccd565b92915050565b600080fd5b600080fd5b60008083601f840112612d1757612d16612b21565b5b8235905067ffffffffffffffff811115612d3457612d33612cf7565b5b602083019150836020820283011115612d5057612d4f612cfc565b5b9250929050565b60008060208385031215612d6e57612d6d61292d565b5b600083013567ffffffffffffffff811115612d8c57612d8b612932565b5b612d9885828601612d01565b92509250509250929050565b6000612daf82612a22565b9050919050565b612dbf81612da4565b8114612dca57600080fd5b50565b600081359050612ddc81612db6565b92915050565b612deb81612aed565b8114612df657600080fd5b50565b600081359050612e0881612de2565b92915050565b600080600060608486031215612e2757612e2661292d565b5b6000612e3586828701612dcd565b9350506020612e4686828701612df9565b925050604084013567ffffffffffffffff811115612e6757612e66612932565b5b612e738682870161293c565b9150509250925092565b612e8681612a42565b82525050565b6000602082019050612ea16000830184612e7d565b92915050565b60008060408385031215612ebe57612ebd61292d565b5b6000612ecc85828601612df9565b925050602083013567ffffffffffffffff811115612eed57612eec612932565b5b612ef98582860161293c565b9150509250929050565b60008060008060808587031215612f1d57612f1c61292d565b5b6000612f2b87828801612a6b565b9450506020612f3c87828801612df9565b935050604085013567ffffffffffffffff811115612f5d57612f5c612932565b5b612f698782880161293c565b9250506060612f7a87828801612df9565b91505092959194509250565b600082825260208201905092915050565b7f6d7573742063616c6c2076616c69642075736572000000000000000000000000600082015250565b6000612fcd601483612f86565b9150612fd882612f97565b602082019050919050565b60006020820190508181036000830152612ffc81612fc0565b9050919050565b6000819050919050565b6000819050919050565b600061303261302d61302884613003565b61300d565b612aed565b9050919050565b61304281613017565b82525050565b60006130576020840184612a6b565b905092915050565b61306881612a42565b82525050565b600061307d6020840184612df9565b905092915050565b61308e81612aed565b82525050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126130c0576130bf61309e565b5b83810192508235915060208301925067ffffffffffffffff8211156130e8576130e7613094565b5b6001820236038313156130fe576130fd613099565b5b509250929050565b600082825260208201905092915050565b60006131238385613106565b9350613130838584612be8565b61313983612b2b565b840190509392505050565b600061016083016131586000840184613048565b613165600086018261305f565b50613173602084018461306e565b6131806020860182613085565b5061318e60408401846130a3565b85830360408701526131a1838284613117565b925050506131b260608401846130a3565b85830360608701526131c5838284613117565b925050506131d6608084018461306e565b6131e36080860182613085565b506131f160a084018461306e565b6131fe60a0860182613085565b5061320c60c084018461306e565b61321960c0860182613085565b5061322760e084018461306e565b61323460e0860182613085565b5061324361010084018461306e565b613251610100860182613085565b506132606101208401846130a3565b858303610120870152613274838284613117565b925050506132866101408401846130a3565b85830361014087015261329a838284613117565b925050508091505092915050565b60006080820190506132bd6000830187612e7d565b6132ca6020830186613039565b81810360408301526132dc8185613144565b90506132eb6060830184612af7565b95945050505050565b60008151905061330381612de2565b92915050565b60006020828403121561331f5761331e61292d565b5b600061332d848285016132f4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061337082612aed565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036133a2576133a1613336565b5b600182019050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000613409602c83612f86565b9150613414826133ad565b604082019050919050565b60006020820190508181036000830152613438816133fc565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b600061349b602c83612f86565b91506134a68261343f565b604082019050919050565b600060208201905081810360008301526134ca8161348e565b9050919050565b600060608201905081810360008301526134eb8186613144565b90506134fa6020830185612ccd565b6135076040830184613039565b949350505050565b7f7369676e6174757265206572726f722100000000000000000000000000000000600082015250565b6000613545601083612f86565b91506135508261350f565b602082019050919050565b6000602082019050818103600083015261357481613538565b9050919050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b60006135d7603883612f86565b91506135e28261357b565b604082019050919050565b60006020820190508181036000830152613606816135ca565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600082356001610160038336030381126136685761366761363c565b5b80830191505092915050565b60006080820190506136896000830187612e7d565b6136966020830186612af7565b81810360408301526136a88185613144565b90506136b76060830184612af7565b95945050505050565b60006136cb82612aed565b91506136d683612aed565b92508282026136e481612aed565b915082820484148315176136fb576136fa613336565b5b5092915050565b61370b81612da4565b82525050565b60006040820190506137266000830185613702565b6137336020830184612af7565b9392505050565b60008115159050919050565b61374f8161373a565b811461375a57600080fd5b50565b60008151905061376c81613746565b92915050565b6000602082840312156137885761378761292d565b5b60006137968482850161375d565b91505092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006137fb602e83612f86565b91506138068261379f565b604082019050919050565b6000602082019050818103600083015261382a816137ee565b9050919050565b6000819050919050565b600060ff82169050919050565b600061386361385e61385984613831565b61300d565b61383b565b9050919050565b61387381613848565b82525050565b600060208201905061388e600083018461386a565b92915050565b7f6f6e6c792062652063616c6c2062792073656c66000000000000000000000000600082015250565b60006138ca601483612f86565b91506138d582613894565b602082019050919050565b600060208201905081810360008301526138f9816138bd565b9050919050565b600061390b82612aed565b915061391683612aed565b925082820190508082111561392e5761392d613336565b5b92915050565b7f62616c616e6365206e6f7420656e6f7567680000000000000000000000000000600082015250565b600061396a601283612f86565b915061397582613934565b602082019050919050565b600060208201905081810360008301526139998161395d565b9050919050565b7f4141323520696e76616c6964206163636f756e74206e6f6e6365000000000000600082015250565b60006139d6601a83612f86565b91506139e1826139a0565b602082019050919050565b6000604082019050613a016000830184612af7565b8181036020830152613a12816139c9565b905092915050565b60008083356001602003843603038112613a3757613a3661363c565b5b80840192508235915067ffffffffffffffff821115613a5957613a58613641565b5b602083019250600182023603831315613a7557613a74613646565b5b509250929050565b6000606082019050613a926000830186612ccd565b613a9f6020830185612e7d565b613aac6040830184612af7565b949350505050565b60006020820190508181036000830152613ace8184613144565b905092915050565b6000613ae182612aed565b9150613aec83612aed565b9250828203905081811115613b0457613b03613336565b5b92915050565b6000606082019050613b1f6000830186613702565b613b2c6020830185612af7565b8181036040830152613b3e8184613144565b9050949350505050565b6000604082019050613b5d6000830185612af7565b613b6a6020830184612af7565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613bcd602683612f86565b9150613bd882613b71565b604082019050919050565b60006020820190508181036000830152613bfc81613bc0565b9050919050565b7f6d7573742063616c6c20627920656e747279706f696e74000000000000000000600082015250565b6000613c39601783612f86565b9150613c4482613c03565b602082019050919050565b60006020820190508181036000830152613c6881613c2c565b9050919050565b6000604082019050613c846000830185612af7565b8181036020830152613c968184613144565b90509392505050565b60008160e01c9050919050565b600060033d1115613ccb5760046000803e613cc8600051613c9f565b90505b90565b600060443d10613d5b57613ce0612923565b60043d036004823e80513d602482011167ffffffffffffffff82111715613d08575050613d5b565b808201805167ffffffffffffffff811115613d265750505050613d5b565b80602083010160043d038501811115613d43575050505050613d5b565b613d5282602001850186612b6b565b82955050505050505b90565b613d678161373a565b82525050565b600081519050919050565b60005b83811015613d96578082015181840152602081019050613d7b565b60008484015250505050565b6000613dad82613d6d565b613db78185612f86565b9350613dc7818560208601613d78565b613dd081612b2b565b840191505092915050565b6000604082019050613df06000830185613d5e565b8181036020830152613e028184613da2565b90509392505050565b50565b6000613e1b600083612f86565b9150613e2682613e0b565b600082019050919050565b6000604082019050613e466000830184613d5e565b8181036020830152613e5781613e0e565b905092915050565b7f41413931206661696c65642073656e6420746f2062656e656669636961727900600082015250565b6000613e95601f83612f86565b9150613ea082613e5f565b602082019050919050565b6000604082019050613ec06000830184612af7565b8181036020830152613ed181613e88565b905092915050565b6000604082019050613eee6000830185612af7565b613efb6020830184613d5e565b9392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613f38602083612f86565b9150613f4382613f02565b602082019050919050565b60006020820190508181036000830152613f6781613f2b565b9050919050565b613f7781612cc3565b8114613f8257600080fd5b50565b600081519050613f9481613f6e565b92915050565b600060208284031215613fb057613faf61292d565b5b6000613fbe84828501613f85565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b6000614023602e83612f86565b915061402e82613fc7565b604082019050919050565b6000602082019050818103600083015261405281614016565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b60006140b5602983612f86565b91506140c082614059565b604082019050919050565b600060208201905081810360008301526140e4816140a8565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000614147602b83612f86565b9150614152826140eb565b604082019050919050565b600060208201905081810360008301526141768161413a565b9050919050565b7f414131302073656e64657220616c726561647920636f6e737472756374656400600082015250565b60006141b3601f83612f86565b91506141be8261417d565b602082019050919050565b60006040820190506141de6000830184612af7565b81810360208301526141ef816141a6565b905092915050565b7f4141313320696e6974436f6465206661696c6564206f72204f4f470000000000600082015250565b600061422d601b83612f86565b9150614238826141f7565b602082019050919050565b60006040820190506142586000830184612af7565b818103602083015261426981614220565b905092915050565b7f4141313420696e6974436f6465206d7573742072657475726e2073656e646572600082015250565b60006142a7602083612f86565b91506142b282614271565b602082019050919050565b60006040820190506142d26000830184612af7565b81810360208301526142e38161429a565b905092915050565b7f4141313520696e6974436f6465206d757374206372656174652073656e646572600082015250565b6000614321602083612f86565b915061432c826142eb565b602082019050919050565b600060408201905061434c6000830184612af7565b818103602083015261435d81614314565b905092915050565b600080fd5b600080fd5b6000808585111561438357614382614365565b5b838611156143945761439361436a565b5b6001850283019150848603905094509492505050565b600082905092915050565b60007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082169050919050565b600082821b905092915050565b60006143fa83836143aa565b8261440581356143b5565b92506014821015614445576144407fffffffffffffffffffffffffffffffffffffffff000000000000000000000000836014036008026143e1565b831692505b505092915050565b7f41413230206163636f756e74206e6f74206465706c6f79656400000000000000600082015250565b6000614483601983612f86565b915061448e8261444d565b602082019050919050565b600060208201905081810360008301526144b281614476565b9050919050565b600060208201905081810360008301526144d2816139c9565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000614500826144d9565b61450a81856144e4565b935061451a818560208601613d78565b61452381612b2b565b840191505092915050565b60006040820190506145436000830185612af7565b818103602083015261455581846144f5565b90509392505050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b60006145ba602d83612f86565b91506145c58261455e565b604082019050919050565b600060208201905081810360008301526145e9816145ad565b9050919050565b600061014082019050614606600083018d612e7d565b614613602083018c612af7565b614620604083018b612ccd565b61462d606083018a612ccd565b61463a6080830189612af7565b61464760a0830188612af7565b61465460c0830187612af7565b61466160e0830186612af7565b61466f610100830185612af7565b61467d610120830184612ccd565b9b9a5050505050505050505050565b600081905092915050565b60006146a2826144d9565b6146ac818561468c565b93506146bc818560208601613d78565b80840191505092915050565b60006146d48284614697565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000614715601d83612f86565b9150614720826146df565b602082019050919050565b6000602082019050818103600083015261474481614708565b9050919050565b600060208201905081810360008301526147658184613da2565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122042fbf9ca67438650b04963459a9861f426a826393c3efb600335eede0069446564736f6c63430008120033";

    public static final String FUNC__COMPENSATETEST = "_compensateTest";

    public static final String FUNC__INNERHANDLEOP = "_innerHandleOp";

    public static final String FUNC__VALIDATESIGNATURE = "_validateSignature";

    public static final String FUNC__VALIDATEUSEROP = "_validateUserOp";

    public static final String FUNC_ADDHANDLER = "addHandler";

    public static final String FUNC_GETNONCE = "getNonce";

    public static final String FUNC_GETUSEROPHASH = "getUserOpHash";

    public static final String FUNC_HANDLEOP = "handleOp";

    public static final String FUNC_HANDLEOPS = "handleOps";

    public static final String FUNC_INCREMENTNONCE = "incrementNonce";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_NONCESEQUENCENUMBER = "nonceSequenceNumber";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PROXIABLEUUID = "proxiableUUID";

    public static final String FUNC_REMOVEHANDLER = "removeHandler";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SIMULATEHANDLEOP = "simulateHandleOp";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UPGRADETO = "upgradeTo";

    public static final String FUNC_UPGRADETOANDCALL = "upgradeToAndCall";

    public static final Event ACCOUNTDEPLOYED_EVENT = new Event("AccountDeployed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}));
    ;

    public static final Event ADMINCHANGED_EVENT = new Event("AdminChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event BALANCECHECKRESAULT_EVENT = new Event("BalanceCheckResault", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event BEACONUPGRADED_EVENT = new Event("BeaconUpgraded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event COMPENSATERESAULT_EVENT = new Event("CompensateResault", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event INITIALIZED_EVENT = new Event("Initialized", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event SIGNATUREVALIDATIONRESAULT_EVENT = new Event("SignatureValidationResault", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event UPGRADED_EVENT = new Event("Upgraded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event USEROPERATIONEVENT_EVENT = new Event("UserOperationEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event USEROPERATIONREVERTREASON_EVENT = new Event("UserOperationRevertReason", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected EntryPoint(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected EntryPoint(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected EntryPoint(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected EntryPoint(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<AccountDeployedEventResponse> getAccountDeployedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ACCOUNTDEPLOYED_EVENT, transactionReceipt);
        ArrayList<AccountDeployedEventResponse> responses = new ArrayList<AccountDeployedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AccountDeployedEventResponse typedResponse = new AccountDeployedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.factory = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AccountDeployedEventResponse getAccountDeployedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ACCOUNTDEPLOYED_EVENT, log);
        AccountDeployedEventResponse typedResponse = new AccountDeployedEventResponse();
        typedResponse.log = log;
        typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.factory = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<AccountDeployedEventResponse> accountDeployedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAccountDeployedEventFromLog(log));
    }

    public Flowable<AccountDeployedEventResponse> accountDeployedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ACCOUNTDEPLOYED_EVENT));
        return accountDeployedEventFlowable(filter);
    }

    public static List<AdminChangedEventResponse> getAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<AdminChangedEventResponse> responses = new ArrayList<AdminChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AdminChangedEventResponse typedResponse = new AdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousAdmin = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AdminChangedEventResponse getAdminChangedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ADMINCHANGED_EVENT, log);
        AdminChangedEventResponse typedResponse = new AdminChangedEventResponse();
        typedResponse.log = log;
        typedResponse.previousAdmin = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.newAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<AdminChangedEventResponse> adminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAdminChangedEventFromLog(log));
    }

    public Flowable<AdminChangedEventResponse> adminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADMINCHANGED_EVENT));
        return adminChangedEventFlowable(filter);
    }

    public static List<BalanceCheckResaultEventResponse> getBalanceCheckResaultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BALANCECHECKRESAULT_EVENT, transactionReceipt);
        ArrayList<BalanceCheckResaultEventResponse> responses = new ArrayList<BalanceCheckResaultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BalanceCheckResaultEventResponse typedResponse = new BalanceCheckResaultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.success = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.ral = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static BalanceCheckResaultEventResponse getBalanceCheckResaultEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(BALANCECHECKRESAULT_EVENT, log);
        BalanceCheckResaultEventResponse typedResponse = new BalanceCheckResaultEventResponse();
        typedResponse.log = log;
        typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.success = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.ral = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<BalanceCheckResaultEventResponse> balanceCheckResaultEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getBalanceCheckResaultEventFromLog(log));
    }

    public Flowable<BalanceCheckResaultEventResponse> balanceCheckResaultEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BALANCECHECKRESAULT_EVENT));
        return balanceCheckResaultEventFlowable(filter);
    }

    public static List<BeaconUpgradedEventResponse> getBeaconUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BEACONUPGRADED_EVENT, transactionReceipt);
        ArrayList<BeaconUpgradedEventResponse> responses = new ArrayList<BeaconUpgradedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BeaconUpgradedEventResponse typedResponse = new BeaconUpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beacon = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static BeaconUpgradedEventResponse getBeaconUpgradedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(BEACONUPGRADED_EVENT, log);
        BeaconUpgradedEventResponse typedResponse = new BeaconUpgradedEventResponse();
        typedResponse.log = log;
        typedResponse.beacon = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<BeaconUpgradedEventResponse> beaconUpgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getBeaconUpgradedEventFromLog(log));
    }

    public Flowable<BeaconUpgradedEventResponse> beaconUpgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BEACONUPGRADED_EVENT));
        return beaconUpgradedEventFlowable(filter);
    }

    public static List<CompensateResaultEventResponse> getCompensateResaultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(COMPENSATERESAULT_EVENT, transactionReceipt);
        ArrayList<CompensateResaultEventResponse> responses = new ArrayList<CompensateResaultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CompensateResaultEventResponse typedResponse = new CompensateResaultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.collect = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sucess = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static CompensateResaultEventResponse getCompensateResaultEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(COMPENSATERESAULT_EVENT, log);
        CompensateResaultEventResponse typedResponse = new CompensateResaultEventResponse();
        typedResponse.log = log;
        typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.collect = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.sucess = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<CompensateResaultEventResponse> compensateResaultEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getCompensateResaultEventFromLog(log));
    }

    public Flowable<CompensateResaultEventResponse> compensateResaultEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(COMPENSATERESAULT_EVENT));
        return compensateResaultEventFlowable(filter);
    }

    public static List<InitializedEventResponse> getInitializedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INITIALIZED_EVENT, transactionReceipt);
        ArrayList<InitializedEventResponse> responses = new ArrayList<InitializedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InitializedEventResponse typedResponse = new InitializedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InitializedEventResponse getInitializedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INITIALIZED_EVENT, log);
        InitializedEventResponse typedResponse = new InitializedEventResponse();
        typedResponse.log = log;
        typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInitializedEventFromLog(log));
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INITIALIZED_EVENT));
        return initializedEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<SignatureValidationResaultEventResponse> getSignatureValidationResaultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SIGNATUREVALIDATIONRESAULT_EVENT, transactionReceipt);
        ArrayList<SignatureValidationResaultEventResponse> responses = new ArrayList<SignatureValidationResaultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SignatureValidationResaultEventResponse typedResponse = new SignatureValidationResaultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.success = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.ral = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SignatureValidationResaultEventResponse getSignatureValidationResaultEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SIGNATUREVALIDATIONRESAULT_EVENT, log);
        SignatureValidationResaultEventResponse typedResponse = new SignatureValidationResaultEventResponse();
        typedResponse.log = log;
        typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.success = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.ral = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<SignatureValidationResaultEventResponse> signatureValidationResaultEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSignatureValidationResaultEventFromLog(log));
    }

    public Flowable<SignatureValidationResaultEventResponse> signatureValidationResaultEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SIGNATUREVALIDATIONRESAULT_EVENT));
        return signatureValidationResaultEventFlowable(filter);
    }

    public static List<UpgradedEventResponse> getUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UPGRADED_EVENT, transactionReceipt);
        ArrayList<UpgradedEventResponse> responses = new ArrayList<UpgradedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpgradedEventResponse typedResponse = new UpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UpgradedEventResponse getUpgradedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UPGRADED_EVENT, log);
        UpgradedEventResponse typedResponse = new UpgradedEventResponse();
        typedResponse.log = log;
        typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUpgradedEventFromLog(log));
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPGRADED_EVENT));
        return upgradedEventFlowable(filter);
    }

    public static List<UserOperationEventEventResponse> getUserOperationEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(USEROPERATIONEVENT_EVENT, transactionReceipt);
        ArrayList<UserOperationEventEventResponse> responses = new ArrayList<UserOperationEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserOperationEventEventResponse typedResponse = new UserOperationEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.nonce = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.success = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UserOperationEventEventResponse getUserOperationEventEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(USEROPERATIONEVENT_EVENT, log);
        UserOperationEventEventResponse typedResponse = new UserOperationEventEventResponse();
        typedResponse.log = log;
        typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.nonce = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.success = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<UserOperationEventEventResponse> userOperationEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUserOperationEventEventFromLog(log));
    }

    public Flowable<UserOperationEventEventResponse> userOperationEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(USEROPERATIONEVENT_EVENT));
        return userOperationEventEventFlowable(filter);
    }

    public static List<UserOperationRevertReasonEventResponse> getUserOperationRevertReasonEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(USEROPERATIONREVERTREASON_EVENT, transactionReceipt);
        ArrayList<UserOperationRevertReasonEventResponse> responses = new ArrayList<UserOperationRevertReasonEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserOperationRevertReasonEventResponse typedResponse = new UserOperationRevertReasonEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.nonce = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.revertReason = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UserOperationRevertReasonEventResponse getUserOperationRevertReasonEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(USEROPERATIONREVERTREASON_EVENT, log);
        UserOperationRevertReasonEventResponse typedResponse = new UserOperationRevertReasonEventResponse();
        typedResponse.log = log;
        typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.nonce = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.revertReason = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<UserOperationRevertReasonEventResponse> userOperationRevertReasonEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUserOperationRevertReasonEventFromLog(log));
    }

    public Flowable<UserOperationRevertReasonEventResponse> userOperationRevertReasonEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(USEROPERATIONREVERTREASON_EVENT));
        return userOperationRevertReasonEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> _compensateTest(String beneficiary, BigInteger gas, UserOperation userOp) {
        final Function function = new Function(
                FUNC__COMPENSATETEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(beneficiary), 
                new org.web3j.abi.datatypes.generated.Uint256(gas), 
                userOp), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> _innerHandleOp(String blunder, BigInteger opIndex, UserOperation userOp, BigInteger gas) {
        final Function function = new Function(
                FUNC__INNERHANDLEOP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(blunder), 
                new org.web3j.abi.datatypes.generated.Uint256(opIndex), 
                userOp, 
                new org.web3j.abi.datatypes.generated.Uint256(gas)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> _validateSignature(UserOperation userOp) {
        final Function function = new Function(
                FUNC__VALIDATESIGNATURE, 
                Arrays.<Type>asList(userOp), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> _validateUserOp(BigInteger opIndex, UserOperation userOp) {
        final Function function = new Function(
                FUNC__VALIDATEUSEROP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(opIndex), 
                userOp), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addHandler(String handler) {
        final Function function = new Function(
                FUNC_ADDHANDLER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(handler)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getNonce(String sender, BigInteger key) {
        final Function function = new Function(FUNC_GETNONCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(sender), 
                new org.web3j.abi.datatypes.generated.Uint192(key)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<byte[]> getUserOpHash(UserOperation userOp) {
        final Function function = new Function(FUNC_GETUSEROPHASH, 
                Arrays.<Type>asList(userOp), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> handleOp(UserOperation userOP) {
        final Function function = new Function(
                FUNC_HANDLEOP, 
                Arrays.<Type>asList(userOP), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> handleOps(List<UserOperation> userOPs) {
        final Function function = new Function(
                FUNC_HANDLEOPS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<UserOperation>(UserOperation.class, userOPs)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> incrementNonce(BigInteger key) {
        final Function function = new Function(
                FUNC_INCREMENTNONCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint192(key)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize() {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> nonceSequenceNumber(String param0, BigInteger param1) {
        final Function function = new Function(FUNC_NONCESEQUENCENUMBER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0), 
                new org.web3j.abi.datatypes.generated.Uint192(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> proxiableUUID() {
        final Function function = new Function(FUNC_PROXIABLEUUID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> removeHandler(String handler) {
        final Function function = new Function(
                FUNC_REMOVEHANDLER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(handler)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> simulateHandleOp(UserOperation op) {
        final Function function = new Function(
                FUNC_SIMULATEHANDLEOP, 
                Arrays.<Type>asList(op), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeTo(String newImplementation) {
        final Function function = new Function(
                FUNC_UPGRADETO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newImplementation)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeToAndCall(String newImplementation, byte[] data, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_UPGRADETOANDCALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newImplementation), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    @Deprecated
    public static EntryPoint load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new EntryPoint(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static EntryPoint load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new EntryPoint(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static EntryPoint load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new EntryPoint(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static EntryPoint load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new EntryPoint(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<EntryPoint> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(EntryPoint.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<EntryPoint> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(EntryPoint.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<EntryPoint> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(EntryPoint.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<EntryPoint> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(EntryPoint.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class UserOperation extends DynamicStruct {
        public String sender;

        public BigInteger nonce;

        public byte[] initCode;

        public byte[] callData;

        public BigInteger callGasLimit;

        public BigInteger verificationGasLimit;

        public BigInteger preVerificationGas;

        public BigInteger maxFeePerGas;

        public BigInteger maxPriorityFeePerGas;

        public byte[] paymasterAndData;

        public byte[] signature;

        public UserOperation(String sender, BigInteger nonce, byte[] initCode, byte[] callData, BigInteger callGasLimit, BigInteger verificationGasLimit, BigInteger preVerificationGas, BigInteger maxFeePerGas, BigInteger maxPriorityFeePerGas, byte[] paymasterAndData, byte[] signature) {
            super(new org.web3j.abi.datatypes.Address(sender), 
                    new org.web3j.abi.datatypes.generated.Uint256(nonce), 
                    new org.web3j.abi.datatypes.DynamicBytes(initCode), 
                    new org.web3j.abi.datatypes.DynamicBytes(callData), 
                    new org.web3j.abi.datatypes.generated.Uint256(callGasLimit), 
                    new org.web3j.abi.datatypes.generated.Uint256(verificationGasLimit), 
                    new org.web3j.abi.datatypes.generated.Uint256(preVerificationGas), 
                    new org.web3j.abi.datatypes.generated.Uint256(maxFeePerGas), 
                    new org.web3j.abi.datatypes.generated.Uint256(maxPriorityFeePerGas), 
                    new org.web3j.abi.datatypes.DynamicBytes(paymasterAndData), 
                    new org.web3j.abi.datatypes.DynamicBytes(signature));
            this.sender = sender;
            this.nonce = nonce;
            this.initCode = initCode;
            this.callData = callData;
            this.callGasLimit = callGasLimit;
            this.verificationGasLimit = verificationGasLimit;
            this.preVerificationGas = preVerificationGas;
            this.maxFeePerGas = maxFeePerGas;
            this.maxPriorityFeePerGas = maxPriorityFeePerGas;
            this.paymasterAndData = paymasterAndData;
            this.signature = signature;
        }

        public UserOperation(Address sender, Uint256 nonce, DynamicBytes initCode, DynamicBytes callData, Uint256 callGasLimit, Uint256 verificationGasLimit, Uint256 preVerificationGas, Uint256 maxFeePerGas, Uint256 maxPriorityFeePerGas, DynamicBytes paymasterAndData, DynamicBytes signature) {
            super(sender, nonce, initCode, callData, callGasLimit, verificationGasLimit, preVerificationGas, maxFeePerGas, maxPriorityFeePerGas, paymasterAndData, signature);
            this.sender = sender.getValue();
            this.nonce = nonce.getValue();
            this.initCode = initCode.getValue();
            this.callData = callData.getValue();
            this.callGasLimit = callGasLimit.getValue();
            this.verificationGasLimit = verificationGasLimit.getValue();
            this.preVerificationGas = preVerificationGas.getValue();
            this.maxFeePerGas = maxFeePerGas.getValue();
            this.maxPriorityFeePerGas = maxPriorityFeePerGas.getValue();
            this.paymasterAndData = paymasterAndData.getValue();
            this.signature = signature.getValue();
        }
    }

    public static class AccountDeployedEventResponse extends BaseEventResponse {
        public String sender;

        public String factory;
    }

    public static class AdminChangedEventResponse extends BaseEventResponse {
        public String previousAdmin;

        public String newAdmin;
    }

    public static class BalanceCheckResaultEventResponse extends BaseEventResponse {
        public String sender;

        public Boolean success;

        public String ral;
    }

    public static class BeaconUpgradedEventResponse extends BaseEventResponse {
        public String beacon;
    }

    public static class CompensateResaultEventResponse extends BaseEventResponse {
        public String sender;

        public BigInteger collect;

        public Boolean sucess;
    }

    public static class InitializedEventResponse extends BaseEventResponse {
        public BigInteger version;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class SignatureValidationResaultEventResponse extends BaseEventResponse {
        public String sender;

        public Boolean success;

        public String ral;
    }

    public static class UpgradedEventResponse extends BaseEventResponse {
        public String implementation;
    }

    public static class UserOperationEventEventResponse extends BaseEventResponse {
        public String sender;

        public BigInteger nonce;

        public Boolean success;
    }

    public static class UserOperationRevertReasonEventResponse extends BaseEventResponse {
        public String sender;

        public BigInteger nonce;

        public byte[] revertReason;
    }
}
