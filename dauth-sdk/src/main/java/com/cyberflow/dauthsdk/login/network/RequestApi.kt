/**
 * dauthwallet
 * 账号注册，登录，授权接口
 *
 * OpenAPI spec version: v1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.cyberflow.dauthsdk.login.network

import com.cyberflow.dauthsdk.login.infrastructure.ApiClient
import com.cyberflow.dauthsdk.login.infrastructure.ReqUrl
import com.cyberflow.dauthsdk.login.infrastructure.RequestConfig
import com.cyberflow.dauthsdk.login.model.AccountRes
import com.cyberflow.dauthsdk.login.model.AuthorizeParam
import com.cyberflow.dauthsdk.login.model.AuthorizeRes
import com.cyberflow.dauthsdk.login.model.AuthorizeToken2Param
import com.cyberflow.dauthsdk.login.model.AuthorizeToken2Res
import com.cyberflow.dauthsdk.login.model.BindAcoountParam
import com.cyberflow.dauthsdk.login.model.BindEmailParam
import com.cyberflow.dauthsdk.login.model.BindPhoneParam
import com.cyberflow.dauthsdk.login.model.BindRealInfoParam
import com.cyberflow.dauthsdk.login.model.BindWalletParam
import com.cyberflow.dauthsdk.login.model.CheckEmailParam
import com.cyberflow.dauthsdk.login.model.CreateAccountParam
import com.cyberflow.dauthsdk.login.model.CreateAccountRes
import com.cyberflow.dauthsdk.login.model.LoginParam
import com.cyberflow.dauthsdk.login.model.LoginRes
import com.cyberflow.dauthsdk.login.model.LogoutParam
import com.cyberflow.dauthsdk.login.model.MiniAccountRealInfoRes
import com.cyberflow.dauthsdk.login.model.QueryByAuthIdParam
import com.cyberflow.dauthsdk.login.model.QueryByEMailParam
import com.cyberflow.dauthsdk.login.model.QueryByPhoneParam
import com.cyberflow.dauthsdk.login.model.QueryRealInfoParam
import com.cyberflow.dauthsdk.login.model.QueryWalletParam
import com.cyberflow.dauthsdk.login.model.QueryWalletRes
import com.cyberflow.dauthsdk.login.model.RefreshTokenParam
import com.cyberflow.dauthsdk.login.model.RefreshTokenParamRes
import com.cyberflow.dauthsdk.login.model.ResetByPasswordParam
import com.cyberflow.dauthsdk.login.model.SendEmailVerifyCodeParam
import com.cyberflow.dauthsdk.login.model.SendPhoneVerifyCodeParam
import com.cyberflow.dauthsdk.login.model.SetPasswordParam
import com.cyberflow.dauthsdk.login.model.TokenAuthenticationParam
import com.cyberflow.dauthsdk.login.model.TokenAuthenticationRes
import com.cyberflow.dauthsdk.login.model.UnbindEmailParam
import com.cyberflow.dauthsdk.login.model.UnbindPhoneParam
import com.cyberflow.dauthsdk.login.model.UpdateBaseInfoParam

private const val USER_TYPE_OF_EMAIL = 10
private const val USER_TYPE_OF_PHONE = 60
private const val AUTHORIZATION = "Authorization"


class RequestApi internal constructor() : ApiClient() {

    /**
     * 自定义账号认证登录，返回临时 code
     *
     * @param body  下面authorize和token 接口，需要严格按照oauth协议标准定义字段, Oauth2 request authorize
     * @return AuthorizeRes
     */

    suspend fun ownAuthorize(body: AuthorizeParam, didToken: String): AuthorizeRes? {
        val localVariableConfig = RequestConfig(
            reqUrl = ReqUrl.PathUrl("/account/v1/oauth2/auth"),
            headers = mapOf(AUTHORIZATION to didToken)
        )
        return request<AuthorizeRes>(localVariableConfig, body)
    }

    /**
     * app第三方认证登录
     *
     * @param body
     * @return AuthorizeToken2Res
     */

     suspend fun authorizeExchangedToken(body: AuthorizeToken2Param): AuthorizeToken2Res? {
        val localVariableConfig = RequestConfig(ReqUrl.PathUrl("/account/v1/sociallogin/exchangedtoken"))
        val response = request<AuthorizeToken2Res>(localVariableConfig, body)
        return response
    }


    /**
     * 绑定子账号
     *
     * @param body
     * @return Any
     */
    suspend fun bindAccount(body: BindAcoountParam): BaseResponse? {
        val localVariableConfig = RequestConfig(ReqUrl.PathUrl("/account/v1/bind"))
        val response = request<BaseResponse>(localVariableConfig, body)
        return response
    }

    /**
     * 绑定邮箱
     *
     * @param body
     * @return Any
     */

    suspend fun bindEmail(body: BindEmailParam): BaseResponse? {
        val localVariableConfig = RequestConfig(ReqUrl.PathUrl("/account/v1/email/bind"))
        return request<BaseResponse>(localVariableConfig, body, true)
    }

    /**
     * 绑定手机号
     *
     * @param body
     * @return Any
     */
    suspend fun bindPhone(body: BindPhoneParam): BaseResponse? {
        val localVariableConfig = RequestConfig(ReqUrl.PathUrl("/account/v1/phone/bind"))
        val response = request<BaseResponse>(localVariableConfig, body)
        return response
    }

    /**
     * 绑定用户真实信息
     *
     * @param body
     * @return Any
     */
    suspend fun bindRealInfo(body: BindRealInfoParam): BaseResponse? {
        val localVariableConfig = RequestConfig(ReqUrl.PathUrl("/account/v1/realinfo/bind"))

        val response = request<BaseResponse>(localVariableConfig, body)
        return response
    }

    /**
     * 注册创建账号,当设置is_login时，返回临时code
     *
     * @param body
     * @return CreateAccountRes
     */

    suspend fun createAccount(body: CreateAccountParam): CreateAccountRes? {
        val localVariableConfig = RequestConfig(ReqUrl.PathUrl("/account/v1/create"))
        return request<CreateAccountRes>(localVariableConfig, body)
    }


    /**
     * 获取用户信息
     *
     * @param body
     * @return AuthorizeToken2Res
     */

    suspend fun getUserInfo(body: AuthorizeToken2Param): AuthorizeToken2Res? {
        val localVariableConfig = RequestConfig(ReqUrl.PathUrl("/account/v1/get_user_info"))
        return request<AuthorizeToken2Res>(localVariableConfig, body, true)
    }


    /**
     * (邮箱、自定义账号、手机号)账号登录验证，返回登录凭证SessionID
     *
     * @param body
     * @return LoginRes
     */
    suspend fun login(body: LoginParam): LoginRes? {
        val localVariableConfig = RequestConfig(ReqUrl.PathUrl("/account/v1/login"))
        return request<LoginRes>(localVariableConfig, body)
    }

    /**
     * @param accessToken 访问资源凭证,有效期短,过期需要刷新
     * @param authId 用户id
     */
    suspend fun queryWallet(accessToken: String, authId: String): QueryWalletRes? {
        val body = QueryWalletParam(accessToken, authId)
        val localVariableConfig = RequestConfig(ReqUrl.PathUrl("/wallet/v1/query"))
        return request<QueryWalletRes>(localVariableConfig, body, true)
    }

    suspend fun bindWallet(bindWalletParam: BindWalletParam): BaseResponse?  {
        val localVariableConfig = RequestConfig(ReqUrl.PathUrl("/wallet/v1/bind"))
        return request<BaseResponse>(localVariableConfig, bindWalletParam, true)
    }


    /**
     * 自有账号授权获取token
     */
    suspend fun ownOauth2Token(
        body: TokenAuthenticationParam,
        didToken: String?
    ): TokenAuthenticationRes? {
        val localVariableConfig = RequestConfig(
            ReqUrl.PathUrl("/account/v1/oauth2/token"),
            headers = mapOf(AUTHORIZATION to didToken.orEmpty())
        )
        return request<TokenAuthenticationRes>(localVariableConfig, body)
    }


    /**
     * 账号退出，包括第三方账号退出
     *
     * @param body
     * @return Any
     */
    suspend fun logout(body: LogoutParam): BaseResponse? {
        val localVariableConfig = RequestConfig(ReqUrl.PathUrl("/account/v1/logout"))
        return request<BaseResponse>(
            localVariableConfig,
            body
        )
    }

    /**
     * 根据authId查询用户
     *
     * @param body
     * @return AccountRes
     */
    suspend fun queryByAuthId(body: QueryByAuthIdParam): AccountRes? {
        val localVariableConfig = RequestConfig(ReqUrl.PathUrl("/account/v1/userinfo/query"))
        return request<AccountRes>(localVariableConfig, body, true)
    }

    /**
     * 根据邮箱查询用户
     *
     * @param body
     * @return AccountRes
     */
    suspend fun queryByEMail(body: QueryByEMailParam): AccountRes? {
        val localVariableConfig = RequestConfig(ReqUrl.PathUrl("/account/v1/userinfo/email/query"))
        return request<AccountRes>(localVariableConfig, body, true)
    }

    /**
     * 根据手机号查询用户
     *
     * @param body
     * @return AccountRes
     */

    suspend fun queryByPhone(body: QueryByPhoneParam): AccountRes? {
        val localVariableConfig = RequestConfig(ReqUrl.PathUrl("/account/v1/userinfo/phone/query"))
        return request<AccountRes>(localVariableConfig, body)
    }

    /**
     * 获取用户真实信息
     *
     * @param body
     * @return MiniAccountRealInfoRes
     */

    suspend fun queryRealInfo(body: QueryRealInfoParam): MiniAccountRealInfoRes? {
        val localVariableConfig = RequestConfig(ReqUrl.PathUrl("/account/v1/realinfo/query"))
        return request<MiniAccountRealInfoRes>(localVariableConfig, body)
    }

    /**
     * 刷新access_token
     *
     * @param body
     * @return RefreshTokenParamRes
     */

    suspend fun refreshToken(body: RefreshTokenParam): RefreshTokenParamRes? {
        val localVariableConfig = RequestConfig(ReqUrl.PathUrl("/account/v1/refresh_token"))
        return request<RefreshTokenParamRes>(
            localVariableConfig,
            body
        )
    }

    /**
     * 重置密码
     *
     * @param body
     * @return Any
     */
    suspend fun resetByPassword(body: ResetByPasswordParam): BaseResponse? {
        if(body.phone.isNullOrEmpty()) {
            body.user_type = USER_TYPE_OF_EMAIL
        } else {
            body.user_type = USER_TYPE_OF_PHONE
        }
        val localVariableConfig = RequestConfig(ReqUrl.PathUrl("/account/v1/password/reset"))
        return request<BaseResponse>(localVariableConfig, body)
    }

    /**
     * 发送邮件验证码
     *
     * @param body
     * @return Any
     */
    suspend fun sendEmailVerifyCode(body: SendEmailVerifyCodeParam): BaseResponse? {
        val localVariableConfig = RequestConfig(ReqUrl.PathUrl("/account/v1/emailverifycode/send"))
        return request<BaseResponse>(localVariableConfig, body)
    }

    /**
     * 发送手机短信验证码
     *
     * @param body
     * @return Any
     */
    suspend fun sendPhoneVerifyCode(body: SendPhoneVerifyCodeParam): BaseResponse? {
        val localVariableConfig = RequestConfig(ReqUrl.PathUrl("/account/v1/phoneverifycode/send"))
        return request<BaseResponse>(localVariableConfig, body)
    }


    /**
     * 邮箱解绑
     *
     * @param body
     * @return Any
     */

    suspend fun unbindEmail(body: UnbindEmailParam): BaseResponse? {
        val localVariableConfig = RequestConfig(ReqUrl.PathUrl("/account/v1/mail/unbind"))
        return request<BaseResponse>(localVariableConfig, body)
    }

    /**
     * 手机号解绑
     *
     * @param body
     * @return Any
     */

    suspend fun unbindPhone(body: UnbindPhoneParam): BaseResponse? {
        val localVariableConfig = RequestConfig(ReqUrl.PathUrl("/account/v1/phone/unbind"))
        return request<BaseResponse>(localVariableConfig, body)
    }

    /**
     * 更新用户信息
     *
     * @param body
     * @return Any
     */

    suspend fun updateBaseInfo(body: UpdateBaseInfoParam): BaseResponse? {
        val localVariableConfig = RequestConfig(ReqUrl.PathUrl("/account/v1/baseinfo/update"))
        return request<BaseResponse>(localVariableConfig, body)
    }

    /**
     * 设置密码
     * @param body password 密码 Authorization 登录后的didtoken
     */
    suspend fun setPassword(body: SetPasswordParam): BaseResponse? {
        val headers = RequestConfig(
            ReqUrl.PathUrl("/account/v1/password/set")
        )
        return request<BaseResponse>(headers, body, true)
    }

    suspend fun checkEmail(body: CheckEmailParam): BaseResponse? {
        val headers = RequestConfig(
            ReqUrl.PathUrl("/account/v1/email/check")
        )
        return request<BaseResponse>(headers, body)
    }
}
