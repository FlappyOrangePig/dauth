/**
 * dauthwallet
 * 账号注册，登录，授权接口
 *
 * OpenAPI spec version: v1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.cyberflow.dauthsdk.login.network

import com.cyberflow.dauthsdk.login.impl.TokenManager
import com.cyberflow.dauthsdk.login.infrastructure.ApiClient
import com.cyberflow.dauthsdk.login.infrastructure.MultiValueMap
import com.cyberflow.dauthsdk.login.infrastructure.RequestConfig
import com.cyberflow.dauthsdk.login.infrastructure.RequestMethod
import com.cyberflow.dauthsdk.login.model.*
import com.cyberflow.dauthsdk.login.utils.DAuthLogger
import kotlinx.coroutines.*


private const val BASE_TEST_URL = "https://api-dev.infras.online"
private const val BASE_FORMAL_URL = "https://api.infras.online/"
private const val CLIENT_ID = "e2fc714c4727ee9395f324cd2e7f331f"
private const val CLIENT_SECRET = "4657*@cde"

class RequestApi(basePath: String = BASE_TEST_URL) : ApiClient(basePath) {

    private fun setCommonParams(url: String): RequestConfig {
        val localVariableQuery: MultiValueMap = mapOf()
        val contentHeaders: Map<String, String> = mapOf("client_id" to CLIENT_ID)
        val acceptsHeaders: Map<String, String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)

        return RequestConfig(
            RequestMethod.POST,
            url,
            query = localVariableQuery,
            headers = localVariableHeaders
        )

    }

    /**
     * 自定义账号认证登录，返回临时 code
     *
     * @param body  下面authorize和token 接口，需要严格按照oauth协议标准定义字段, Oauth2 request authorize
     * @return AuthorizeRes
     */

    suspend fun ownAuthorize(body: AuthorizeParam, didToken: String): AuthorizeRes? = awaitRequest {
        val localVariableQuery: MultiValueMap = mapOf()
        val contentHeaders: Map<String, String> = mapOf("client_id" to CLIENT_ID)
        val contentIdHeaders: Map<String, String> = mapOf("Authorization" to didToken)
        val acceptsHeaders: Map<String, String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        localVariableHeaders.putAll(contentIdHeaders)

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/oauth2/auth",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<AuthorizeRes>(localVariableConfig, body)
        response

    }

    /**
     * app第三方认证登录
     *
     * @param body
     * @return AuthorizeToken2Res
     */

     suspend fun authorizeExchangedToken(body: AuthorizeToken2Param): AuthorizeToken2Res? = awaitRequest {
        val localVariableConfig = setCommonParams("/account/v1/sociallogin/exchangedtoken")
        val response = request<AuthorizeToken2Res>(localVariableConfig, body)
        response
    }


    /**
     * 绑定子账号
     *
     * @param body
     * @return Any
     */
    suspend fun bindAccount(body: BindAcoountParam): BaseResponse? = awaitRequest {
        val localVariableConfig = setCommonParams("/account/v1/bind")
        val response = request<BaseResponse>(localVariableConfig, body)
        response
    }

    /**
     * 绑定邮箱
     *
     * @param body
     * @return Any
     */

    suspend fun bindEmail(body: BindEmailParam): BaseResponse? = awaitRequest {
        val localVariableConfig = setCommonParams("/account/v1/email/bind")
        TokenManager.instance.authenticatedRequest { accessToken ->
            body.access_token = accessToken.orEmpty()
            request<BaseResponse>(localVariableConfig, body)
        }
    }

    /**
     * 绑定手机号
     *
     * @param body
     * @return Any
     */
    suspend fun bindPhone(body: BindPhoneParam): BaseResponse? = awaitRequest {
        val localVariableConfig = setCommonParams("/account/v1/phone/bind")
        val response = request<BaseResponse>(localVariableConfig, body)
        response
    }

    /**
     * 绑定用户真实信息
     *
     * @param body
     * @return Any
     */
    suspend fun bindRealInfo(body: BindRealInfoParam): BaseResponse? = awaitRequest {
        val localVariableConfig = setCommonParams("/account/v1/realinfo/bind")

        val response = request<BaseResponse>(localVariableConfig, body)
        response
    }

/**
     * 注册创建账号,当设置is_login时，返回临时code
     *
     * @param body
     * @return CreateAccountRes
     */

    suspend fun createAccount(body: CreateAccountParam): CreateAccountRes? = awaitRequest {
        val localVariableConfig = setCommonParams("/account/v1/create")
        val response = request<CreateAccountRes>(localVariableConfig, body)
        response
    }


    /**
     * 获取用户信息
     *
     * @param body
     * @return AuthorizeToken2Res
     */

    suspend fun getUserInfo(body: AuthorizeToken2Param): AuthorizeToken2Res? = awaitRequest {
        val localVariableConfig = setCommonParams("/account/v1/get_user_info")
        TokenManager.instance.authenticatedRequest() { accessToken ->
            body.access_token = accessToken.orEmpty()
            request<AuthorizeToken2Res>(localVariableConfig, body)
        }
    }


    /**
     * (邮箱、自定义账号、手机号)账号登录验证，返回登录凭证SessionID
     *
     * @param body
     * @return LoginRes
     */
    suspend fun login(body: LoginParam?): LoginRes? = awaitRequest {
        val localVariableConfig = setCommonParams("/account/v1/login")
        request<LoginRes>(localVariableConfig, body)
    }

    /**
     * @param accessToken 访问资源凭证,有效期短,过期需要刷新
     * @param authId 用户id
     */
    suspend fun queryWallet(accessToken: String, authId: String): QueryWalletRes? = awaitRequest {
        val body = QueryWalletParam(accessToken, authId)
        val localVariableConfig = setCommonParams("/wallet/v1/query")
        TokenManager.instance.authenticatedRequest { accessToken ->
            body.access_token = accessToken.orEmpty()
            DAuthLogger.d("queryWallet accessToken= ${body.access_token}")
            request<QueryWalletRes>(localVariableConfig, body)
        }
    }

    suspend fun bindWallet(bindWalletParam: BindWalletParam): BaseResponse? = awaitRequest  {
        val localVariableConfig = setCommonParams("/wallet/v1/bind")
        TokenManager.instance.authenticatedRequest {
            bindWalletParam.access_token = accessToken
            request<BaseResponse>(localVariableConfig, bindWalletParam)
        }
    }


    /**
     * 自有账号授权获取token
     */

    suspend fun ownOauth2Token(body: TokenAuthenticationParam, didToken: String?): TokenAuthenticationRes? = awaitRequest {
        val localVariableQuery: MultiValueMap = mapOf()
        val contentHeaders: Map<String, String> = mapOf("client_id" to CLIENT_ID)
        val secretHeaders: Map<String, String> = mapOf("client_secret" to CLIENT_SECRET)
        val authHeaders: Map<String, String> = mapOf("Authorization" to didToken.orEmpty())
        val acceptsHeaders: Map<String, String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        localVariableHeaders.putAll(secretHeaders)
        localVariableHeaders.putAll(authHeaders)

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/oauth2/token",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<TokenAuthenticationRes>(localVariableConfig, body)
        response
    }


    /**
     * 账号退出，包括第三方账号退出
     *
     * @param body
     * @return Any
     */
    fun logout(body: LogoutParam): Boolean {
        val localVariableConfig = setCommonParams("/account/v1/logout")
        val response = request<BaseResponse>(
            localVariableConfig,
            body
        )
        if(response?.iRet == 0) {
            return true
        }
        return false
    }

    /**
     * 根据authId查询用户
     *
     * @param body
     * @return AccountRes
     */
    suspend fun queryByAuthId(body: QueryByAuthIdParam): AccountRes? = awaitRequest {
        TokenManager.instance.authenticatedRequest { accessToken ->
            body.access_token = accessToken.orEmpty()
            val localVariableConfig = setCommonParams("/account/v1/userinfo/query")
            request<AccountRes>(localVariableConfig, body)
        }
    }

    /**
     * 根据邮箱查询用户
     *
     * @param body
     * @return AccountRes
     */
    suspend fun queryByEMail(body: QueryByEMailParam): AccountRes? = awaitRequest {
        TokenManager.instance.authenticatedRequest { accessToken ->
            body.access_token = accessToken.orEmpty()
            val localVariableConfig = setCommonParams("/account/v1/userinfo/email/query")
            request<AccountRes>(localVariableConfig, body)
        }
    }

    /**
     * 根据手机号查询用户
     *
     * @param body
     * @return AccountRes
     */

    suspend fun queryByPhone(body: QueryByPhoneParam): AccountRes? = awaitRequest {
        val localVariableConfig = setCommonParams("/account/v1/userinfo/phone/query")
        val response = request<AccountRes>(localVariableConfig, body)
        response
    }

    /**
     * 获取用户真实信息
     *
     * @param body
     * @return MiniAccountRealInfoRes
     */

    suspend fun queryRealInfo(body: QueryRealInfoParam): MiniAccountRealInfoRes? = awaitRequest {
        val localVariableConfig = setCommonParams("/account/v1/realinfo/query")
        val response = request<MiniAccountRealInfoRes>(localVariableConfig, body)
        response
    }

    /**
     * 刷新access_token
     *
     * @param body
     * @return RefreshTokenParamRes
     */

    suspend fun refreshToken(body: RefreshTokenParam): RefreshTokenParamRes? = awaitRequest {
        val localVariableConfig = setCommonParams("/account/v1/refresh_token")
        request<RefreshTokenParamRes>(
            localVariableConfig,
            body
        )
    }

    /**
     * 重置密码
     *
     * @param body
     * @return Any
     */
    suspend fun resetByPassword(body: ResetByPasswordParam) : BaseResponse? = awaitRequest {
        val localVariableConfig = setCommonParams("/account/v1/password/reset")
        val response = request<BaseResponse>(localVariableConfig, body)
        response
    }

    /**
     * 发送邮件验证码
     *
     * @param body
     * @return Any
     */
    suspend fun sendEmailVerifyCode(body: SendEmailVerifyCodeParam) = awaitRequest {
        val localVariableConfig = setCommonParams("/account/v1/emailverifycode/send")
        request<BaseResponse>(localVariableConfig, body)
    }

    /**
     * 发送手机短信验证码
     *
     * @param body
     * @return Any
     */
    suspend fun sendPhoneVerifyCode(body: SendPhoneVerifyCodeParam) = awaitRequest {
        val localVariableConfig = setCommonParams("/account/v1/phoneverifycode/send")
        request<BaseResponse>(localVariableConfig, body)
    }


    /**
     * 邮箱解绑
     *
     * @param body
     * @return Any
     */

    suspend fun unbindEmail(body: UnbindEmailParam): BaseResponse? = awaitRequest {
        val localVariableConfig = setCommonParams("/account/v1/mail/unbind")
        val response = request<BaseResponse>(localVariableConfig, body)
        response
    }

    /**
     * 手机号解绑
     *
     * @param body
     * @return Any
     */

     suspend fun unbindPhone(body: UnbindPhoneParam): BaseResponse? = awaitRequest {
        val localVariableConfig = setCommonParams("/account/v1/phone/unbind")
        val response = request<BaseResponse>(localVariableConfig, body)
        response
    }

    /**
     * 更新用户信息
     *
     * @param body
     * @return Any
     */

    suspend fun updateBaseInfo(body: UpdateBaseInfoParam): BaseResponse? = awaitRequest {
        val localVariableConfig = setCommonParams("/account/v1/baseinfo/update")
        val response = request<BaseResponse>(localVariableConfig, body)
        response
    }

    /**
     * 设置密码
     * @param body password 密码 Authorization 登录后的didtoken
     */
    suspend fun setPassword(body: SetPasswordParam, didToken: String?) : BaseResponse? = awaitRequest {
        val localVariableQuery: MultiValueMap = mapOf()
        val contentHeaders: Map<String, String> = mapOf("client_id" to CLIENT_ID)
        val secretHeaders: Map<String, String> = mapOf("client_secret" to CLIENT_SECRET)
        val authHeaders: Map<String, String> = mapOf("Authorization" to didToken.orEmpty())
        val acceptsHeaders: Map<String, String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        localVariableHeaders.putAll(secretHeaders)
        localVariableHeaders.putAll(authHeaders)

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/password/set",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        var response: BaseResponse? = null
        response = request<BaseResponse>(localVariableConfig, body)
        response
    }

}
