/**
 * dauthwallet
 * 账号注册，登录，授权接口
 *
 * OpenAPI spec version: v1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.cyberflow.dauthsdk.login.network

import android.os.Parcel
import com.cyberflow.dauthsdk.login.const.LoginConst
import com.cyberflow.dauthsdk.login.infrastructure.ApiClient
import com.cyberflow.dauthsdk.login.infrastructure.MultiValueMap
import com.cyberflow.dauthsdk.login.infrastructure.RequestConfig
import com.cyberflow.dauthsdk.login.infrastructure.RequestMethod
import com.cyberflow.dauthsdk.login.model.*
import com.cyberflow.dauthsdk.login.response.BaseResponseBody
import com.cyberflow.dauthsdk.login.utils.SignUtils
import com.google.gson.Gson
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import okhttp3.Call
import okhttp3.Response


private const val BASE_URL = "https://dauth-test.mimo.immo"
private const val CLIENT_ID = "e2fc714c4727ee9395f324cd2e7f331f"
private const val CLIENT_SECRET = "4657*@cde"

class RequestApi(basePath: String = BASE_URL) : ApiClient(basePath) {

    private fun setCommonParams(url: String): RequestConfig {
        val localVariableQuery: MultiValueMap = mapOf()
        val contentHeaders: Map<String, String> = mapOf("client_id" to CLIENT_ID)
        val acceptsHeaders: Map<String, String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)

        return RequestConfig(
            RequestMethod.POST,
            url,
            query = localVariableQuery,
            headers = localVariableHeaders
        )

    }

    private inline fun <reified T> fromJson(json: String?): T {
        return Gson().fromJson(json, T::class.java)
    }


    fun Call.await(): Response {
        return execute()
    }


    /**
     * 第三方认证登录，返回临时 code
     *
     * @param body  下面authorize和token 接口，需要严格按照oauth协议标准定义字段, Oauth2 request authorize
     * @return AuthorizeRes
     */
    fun authorize(body: AuthorizeParam): AuthorizeRes? {
        val localVariableBody: Any = body
        val localVariableQuery: MultiValueMap = mapOf()

        val contentHeaders: Map<String, String> = mapOf()
        val acceptsHeaders: Map<String, String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/sociallogin/auth",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<AuthorizeRes>(
            localVariableConfig,
            localVariableBody
        )
        return fromJson(response)
    }

    /**
     * 自定义账号认证登录，返回临时 code
     *
     * @param body  下面authorize和token 接口，需要严格按照oauth协议标准定义字段, Oauth2 request authorize
     * @return AuthorizeRes
     */

    fun ownAuthorize(body: AuthorizeParam, didToken: String): AuthorizeRes? {
        val localVariableQuery: MultiValueMap = mapOf()
        val contentHeaders: Map<String, String> = mapOf("client_id" to CLIENT_ID)
        val contentIdHeaders: Map<String, String> = mapOf("Authorization" to didToken)
        val acceptsHeaders: Map<String, String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        localVariableHeaders.putAll(contentIdHeaders)

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/oauth2/auth",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<AuthorizeRes>(localVariableConfig, body)
        return fromJson(response)

    }

    /**
     * app第三方认证登录
     *
     * @param body
     * @return AuthorizeToken2Res
     */

    fun authorizeExchangedToken(body: AuthorizeToken2Param): AuthorizeToken2Res? {

        val localVariableConfig = setCommonParams("/account/v1/sociallogin/exchangedtoken")

        val response = request<AuthorizeToken2Res>(localVariableConfig, body)
        return fromJson(response)
    }


    /**
     * 绑定子账号
     *
     * @param body
     * @return Any
     */
    fun bindAccount(body: BindAcoountParam): BaseResponse? {
        val localVariableConfig = setCommonParams("/account/v1/bind")
        val response = request<Any>(localVariableConfig, body)
        return fromJson(response)
    }

    /**
     * 绑定邮箱
     *
     * @param body
     * @return Any
     */

    fun bindEmail(body: BindEmailParam): BaseResponse? {
        val localVariableConfig = setCommonParams("/account/v1/email/bind")

        val response = request<Any>(
            localVariableConfig,
            body
        )
        return fromJson(response)
    }

    /**
     * 绑定手机号
     *
     * @param body
     * @return Any
     */
    fun bindPhone(body: BindPhoneParam): BaseResponse? {

        val localVariableConfig = setCommonParams("/account/v1/phone/bind")
        val response = request<Any>(
            localVariableConfig,
            body
        )
        return fromJson(response)
    }

    /**
     * 绑定用户真实信息
     *
     * @param body
     * @return Any
     */
    fun bindRealInfo(body: BindRealInfoParam): BaseResponse? {
        val localVariableConfig = setCommonParams("/account/v1/realinfo/bind")

        val response = request<Any>(
            localVariableConfig,
            body,
        )

        return fromJson(response)
    }

    /**
     * 注册创建账号,当设置is_login时，返回临时code
     *
     * @param body
     * @return CreateAccountRes
     */

    fun createAccount(body: CreateAccountParam): CreateAccountRes? {

        val localVariableConfig = setCommonParams("/account/v1/create")
        val response = request<CreateAccountRes>(
            localVariableConfig,
            body
        )
        return fromJson(response)
    }


    /**
     * 获取用户信息
     *
     * @param body
     * @return AuthorizeToken2Res
     */

    fun getUserInfo(body: AuthorizeToken2Param): AuthorizeToken2Res? {

        val localVariableConfig = setCommonParams("/account/v1/get_user_info")
        val response = request<AuthorizeToken2Res>(
            localVariableConfig,
            body

        )
        return fromJson(response)
    }

    /**
     * 用户profile信息,给appserver 获取用户信息
     *
     * @param body
     * @return GetAcccountInfoRes
     */
    fun getAccountInfo(body: GetAcccountInfoParam): GetAcccountInfoRes? {

        val localVariableConfig = setCommonParams("/account/v1/getacccountinfo")

        val response = request<GetAcccountInfoRes>(
            localVariableConfig,
            body
        )
        return fromJson(response)
    }

    /**
     * (邮箱、自定义账号、手机号)账号登录验证，返回登录凭证SessionID
     *
     * @param body
     * @return LoginRes
     */
    fun login(body: LoginParam): LoginRes? {

        val localVariableConfig = setCommonParams("/account/v1/login")

        val response = request<LoginRes>(localVariableConfig, body)
        return fromJson(response)
    }

    /**
     * @param access_token 访问资源凭证,有效期短,过期需要刷新
     * @param authid 用户id
     */
    fun queryWallet(accessToken: String, authId: String, ): QueryWalletRes {
        val map = HashMap<String,String>()
        map[LoginConst.ACCESS_TOKEN] = accessToken
        map["authId"] = authId
        val sign = SignUtils.sign(map)
        val body = QueryWalletParam(accessToken, authId, sign)
        val localVariableConfig = setCommonParams("/wallet/v1/query")
        val response = request<QueryWalletRes>(localVariableConfig, body)
        return fromJson(response)
    }

    fun bindWallet(accessToken: String, authId: String): BaseResponse {
        val bindWalletParam = BindWalletParam(
            accessToken,
            authId,
            "0xff00",
            11,
            "0xff",
            "0x"
        )
        val localVariableConfig = setCommonParams("/wallet/v1/bind")
        val response = request<BaseResponse>(
            localVariableConfig,
            bindWalletParam
        )

        return  fromJson(response)
    }


    /**
     * 自有账号授权获取token
     */

    fun ownOauth2Token(body: TokenAuthenticationParam, didToken: String?): TokenAuthenticationRes? {
        val localVariableQuery: MultiValueMap = mapOf()
        val contentHeaders: Map<String, String> = mapOf("client_id" to CLIENT_ID)
        val secretHeaders: Map<String, String> = mapOf("client_secret" to CLIENT_SECRET)
        val authHeaders: Map<String, String> = mapOf("Authorization" to didToken.orEmpty())
        val acceptsHeaders: Map<String, String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        localVariableHeaders.putAll(secretHeaders)
        localVariableHeaders.putAll(authHeaders)

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account/v1/oauth2/token",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<TokenAuthenticationRes>(
            localVariableConfig,
            body
        )
        return fromJson(response)
    }


    /**
     * (邮箱、自定义账号、手机号)认证登录，返回临时 code
     *
     * @param body
     * @return LoginAuthRes
     */

    fun loginAuth(body: LoginAuthParam): LoginAuthRes? {
        val localVariableConfig = setCommonParams("/account/v1/login/auth")
        val response = request<LoginAuthRes>(
            localVariableConfig,
            body
        )
        return fromJson(response)
    }

    /**
     * 账号退出，包括第三方账号退出
     *
     * @param body
     * @return Any
     */
    fun logout(body: LogoutParam): BaseResponse? {
        val localVariableConfig = setCommonParams("/account/v1/logout")

        val response = request<Any>(
            localVariableConfig,
            body
        )
        return fromJson(response)

    }

    /**
     * 根据账号查询用户信息
     *
     * @param body
     * @return AccountRes
     */
    fun queryByAccountNum(body: QueryByAccountParam): AccountRes? {

        val localVariableConfig = setCommonParams("/account/v1/userinfo/query")

        val response = request<AccountRes>(
            localVariableConfig,
            body
        )
        return fromJson(response)

    }

    /**
     * 根据邮箱查询用户
     *
     * @param body
     * @return AccountRes
     */
    fun queryByEMail(body: QueryByEMailParam): AccountRes? {
        val localVariableConfig = setCommonParams("/account/v1/userinfo/email/query")

        val response = request<Any>(
            localVariableConfig,
            body
        )
        return fromJson(response)

    }

    /**
     * 根据手机号查询用户
     *
     * @param body
     * @return AccountRes
     */

    fun queryByPhone(body: QueryByPhoneParam): AccountRes? {

        val localVariableConfig = setCommonParams("/account/v1/userinfo/phone/query")

        val response = request<Any>(
            localVariableConfig,
            body
        )
        return fromJson(response)
    }

    /**
     * 获取用户真实信息
     *
     * @param body
     * @return MiniAccountRealInfoRes
     */

    fun queryRealInfo(body: QueryRealInfoParam): MiniAccountRealInfoRes? {
        val localVariableConfig = setCommonParams("/account/v1/realinfo/query")

        val response = request<Any>(
            localVariableConfig,
            body
        )
        return fromJson(response)
    }

    /**
     * 刷新access_token
     *
     * @param body
     * @return RefreshTokenParamRes
     */

    fun refreshToken(body: RefreshTokenParam): RefreshTokenParamRes? {

        val localVariableConfig = setCommonParams("/account/v1/refresh_token")

        val response = request<Any>(
            localVariableConfig,
            body
        )
        return fromJson(response)

    }

    /**
     * 重置密码
     *
     * @param body
     * @return Any
     */
    fun resetByPassword(body: ResetByPasswordParam): BaseResponse? {
        val localVariableConfig = setCommonParams("/account/v1/password/reset")
        val response = request<Any>(localVariableConfig, body)
        return fromJson(response)
    }

    /**
     * 发送邮件验证码
     *
     * @param body
     * @return Any
     */
    suspend fun sendEmailVerifyCode(body: SendEmailVerifyCodeParam): BaseResponse {
        val localVariableConfig = setCommonParams("/account/v1/emailverifycode/send")
        val response = withContext(Dispatchers.IO) {
            request<BaseResponse>(localVariableConfig, body)
        }
        return Gson().fromJson(response, BaseResponse::class.java)
    }

    /**
     * 发送手机短信验证码
     *
     * @param body
     * @return Any
     */
    fun sendPhoneVerifyCode(body: SendPhoneVerifyCodeParam): Any {

        val localVariableConfig = setCommonParams("/account/v1/phoneverifycode/send")
        val response = request<Any>(
            localVariableConfig,
            body
        )
        return false
    }

    /**
     * 账号认证,给appserver 做临时code校验, 并返回access token
     *
     * @param body  Oauth2 request access token
     * @return TokenAuthenticationRes
     */

    fun tokenAuthentication(body: TokenAuthenticationParam): TokenAuthenticationRes? {
        val localVariableConfig = setCommonParams("/account/v1/oauth2/token")

        val response = request<Any>(
            localVariableConfig,
            body
        )
        return fromJson(response)
    }

    /**
     * 邮箱解绑
     *
     * @param body
     * @return Any
     */

    fun unbindEmail(body: UnbindEmailParam): BaseResponse? {

        val localVariableConfig = setCommonParams("/account/v1/mail/unbind")
        val response = request<Any>(
            localVariableConfig,
            body
        )
        return fromJson(response)
    }

    /**
     * 手机号解绑
     *
     * @param body
     * @return Any
     */

    fun unbindPhone(body: UnbindPhoneParam): BaseResponse? {

        val localVariableConfig = setCommonParams("/account/v1/phone/unbind")

        val response = request<Any>(
            localVariableConfig,
            body
        )
        return fromJson(response)
    }

    /**
     * 更新用户信息
     *
     * @param body
     * @return Any
     */

    fun updateBaseInfo(body: UpdateBaseInfoParam): BaseResponse? {

        val localVariableConfig = setCommonParams("/account/v1/baseinfo/update")
        val response = request<BaseResponse>(
            localVariableConfig,
            body
        )
        return fromJson(response)
    }

}
