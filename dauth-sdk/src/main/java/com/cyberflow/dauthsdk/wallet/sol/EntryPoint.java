package com.cyberflow.dauthsdk.wallet.sol;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.0.
 */
@SuppressWarnings("rawtypes")
public class EntryPoint extends Contract {
    public static final String BINARY = "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff168152503480156200004457600080fd5b50620000556200005b60201b60201c565b62000205565b600060019054906101000a900460ff1615620000ae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a590620001a8565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff16146200011f5760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620001169190620001e8565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006200019060278362000121565b91506200019d8262000132565b604082019050919050565b60006020820190508181036000830152620001c38162000181565b9050919050565b600060ff82169050919050565b620001e281620001ca565b82525050565b6000602082019050620001ff6000830184620001d7565b92915050565b6080516137c46200023d60003960008181610686015281816107140152818161080e0152818161089c015261094c01526137c46000f3fe6080604052600436106100dd5760003560e01c806352d1902d1161007f5780638129fc1c116100595780638129fc1c146102875780638da5cb5b1461029e578063d6383f94146102c9578063f2fde38b146102f2576100dd565b806352d1902d1461021c578063532d3ac914610247578063715018a614610270576100dd565b80631b2e01b8116100bb5780631b2e01b81461015d57806335567e1a1461019a5780633659cfe6146101d75780634f1ef28614610200576100dd565b8063099dd37f146100e25780630bd28e3b1461010b57806312b78b7514610134575b600080fd5b3480156100ee57600080fd5b5061010960048036038101906101049190611d1c565b61031b565b005b34801561011757600080fd5b50610132600480360381019061012d9190611db5565b610329565b005b34801561014057600080fd5b5061015b60048036038101906101569190611e18565b6103c6565b005b34801561016957600080fd5b50610184600480360381019061017f9190611ed2565b6105b0565b6040516101919190611f2b565b60405180910390f35b3480156101a657600080fd5b506101c160048036038101906101bc9190611ed2565b6105d5565b6040516101ce9190611f2b565b60405180910390f35b3480156101e357600080fd5b506101fe60048036038101906101f99190611f46565b610684565b005b61021a600480360381019061021591906120b9565b61080c565b005b34801561022857600080fd5b50610231610948565b60405161023e9190612124565b60405180910390f35b34801561025357600080fd5b5061026e6004803603810190610269919061219f565b610a01565b005b34801561027c57600080fd5b50610285610a55565b005b34801561029357600080fd5b5061029c610a69565b005b3480156102aa57600080fd5b506102b3610ba7565b6040516102c091906121fb565b60405180910390f35b3480156102d557600080fd5b506102f060048036038101906102eb919061226c565b610bd1565b005b3480156102fe57600080fd5b5061031960048036038101906103149190611f46565b610d56565b005b610326600082610dd9565b50565b60c960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008277ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906103be9061232b565b919050555050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042b906123d0565b60405180910390fd5b8160c001358260a00135836080013561044d91906123f0565b61045791906123f0565b8260e001356104669190612424565b8260000160208101906104799190611f46565b73ffffffffffffffffffffffffffffffffffffffff163110156104d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c8906124b2565b60405180910390fd5b8160000160208101906104e49190611f46565b73ffffffffffffffffffffffffffffffffffffffff16633a871cdd8360a00135848460006040518563ffffffff1660e01b8152600401610526939291906127a3565b60206040518083038160008887f1158015610545573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061056a91906127f6565b6000146105ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a39061286f565b60405180910390fd5b5050565b60c9602052816000526040600020602052806000526040600020600091509150505481565b600060408277ffffffffffffffffffffffffffffffffffffffffffffffff16901b60c960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205417905092915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1603610712576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070990612901565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610751610ff9565b73ffffffffffffffffffffffffffffffffffffffff16146107a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079e90612993565b60405180910390fd5b6107b081611050565b61080981600067ffffffffffffffff8111156107cf576107ce611f8e565b5b6040519080825280601f01601f1916602001820160405280156108015781602001600182028036833780820191505090505b50600061105b565b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff160361089a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089190612901565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166108d9610ff9565b73ffffffffffffffffffffffffffffffffffffffff161461092f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092690612993565b60405180910390fd5b61093882611050565b6109448282600161105b565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146109d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cf90612a25565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b60005b82829050811015610a5057610a3d81848484818110610a2657610a25612a45565b5b9050602002810190610a389190612a83565b610dd9565b8080610a489061232b565b915050610a04565b505050565b610a5d6111c9565b610a676000611247565b565b60008060019054906101000a900460ff16159050808015610a9a5750600160008054906101000a900460ff1660ff16105b80610ac75750610aa93061130d565b158015610ac65750600160008054906101000a900460ff1660ff16145b5b610b06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afd90612b1e565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610b43576001600060016101000a81548160ff0219169083151502179055505b610b4b611330565b8015610ba45760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610b9b9190612b86565b60405180910390a15b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60005a90506000610be186611389565b90503073ffffffffffffffffffffffffffffffffffffffff166312b78b7587836040518363ffffffff1660e01b8152600401610c1e929190612ba1565b600060405180830381600087803b158015610c3857600080fd5b505af1158015610c4c573d6000803e3d6000fd5b50505050610c59866113a2565b5060006060600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614610d05578673ffffffffffffffffffffffffffffffffffffffff168686604051610cb9929190612c01565b6000604051808303816000865af19150503d8060008114610cf6576040519150601f19603f3d011682016040523d82523d6000602084013e610cfb565b606091505b5080925081935050505b60005a85610d139190612c1a565b90508083836040517f466c17af000000000000000000000000000000000000000000000000000000008152600401610d4d93929190612ce8565b60405180910390fd5b610d5e6111c9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610dcd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc490612d98565b60405180910390fd5b610dd681611247565b50565b60005a90506000610de983611389565b90503073ffffffffffffffffffffffffffffffffffffffff166312b78b7584836040518363ffffffff1660e01b8152600401610e26929190612ba1565b600060405180830381600087803b158015610e4057600080fd5b505af1925050508015610e51575060015b610ed957610e5d612dc5565b806308c379a003610ecd5750610e71612de7565b80610e7c5750610ecf565b836000016020810190610e8f9190611f46565b816040517fffa373d6000000000000000000000000000000000000000000000000000000008152600401610ec4929190612ebb565b60405180910390fd5b505b3d6000803e3d6000fd5b610f0a84846000016020810190610ef09190611f46565b8560a00135868060400190610f059190612eeb565b6114d0565b610f2a836000016020810190610f209190611f46565b8460200135611701565b610f6b57836040517f220266b6000000000000000000000000000000000000000000000000000000008152600401610f629190612f9a565b60405180910390fd5b6000610f76846113a2565b905060005a84610f869190612c1a565b9050846000016020810190610f9b9190611f46565b73ffffffffffffffffffffffffffffffffffffffff16837f6616474cbd7c6a0e558f9ef7348dcaaaf5fd50424b7f79f2816348622a0fdaa487602001358585604051610fe993929190612fc8565b60405180910390a3505050505050565b60006110277f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b6117bf565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6110586111c9565b50565b6110877f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b6117c9565b60000160009054906101000a900460ff16156110ab576110a6836117d3565b6111c4565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561111357506040513d601f19601f820116820180604052508101906111109190613014565b60015b611152576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611149906130b3565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b81146111b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ae90613145565b60405180910390fd5b506111c383838361188c565b5b505050565b6111d16118b8565b73ffffffffffffffffffffffffffffffffffffffff166111ef610ba7565b73ffffffffffffffffffffffffffffffffffffffff1614611245576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123c906131b1565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff1661137f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137690613243565b60405180910390fd5b6113876118c0565b565b600061139482611921565b805190602001209050919050565b6000808280606001906113b59190612eeb565b905011156114c65760006114348360000160208101906113d59190611f46565b60008580606001906113e79190612eeb565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505086608001356119ff565b9050806114bd576000611448610800611a18565b90506000815111156114bb578360000160208101906114679190611f46565b73ffffffffffffffffffffffffffffffffffffffff167fbe4889eb241fb33bc0e9873f6e442f4c5dc653a55e7ad8bca2f001c9b3d818fb8560200135836040516114b2929190613263565b60405180910390a25b505b809150506114cb565b600090505b919050565b600082829050146116fa5760008473ffffffffffffffffffffffffffffffffffffffff163b1461153757846040517f220266b600000000000000000000000000000000000000000000000000000000815260040161152e91906132df565b60405180910390fd5b6000611544838386611a48565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036115b757856040517f220266b60000000000000000000000000000000000000000000000000000000081526004016115ae9190613359565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461162757856040517f220266b600000000000000000000000000000000000000000000000000000000815260040161161e91906133d3565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff163b0361168357856040517f220266b600000000000000000000000000000000000000000000000000000000815260040161167a919061344d565b60405180910390fd5b6000838360009060149261169993929190613485565b906116a49190613504565b60601c90508573ffffffffffffffffffffffffffffffffffffffff167f2682a218602b9036c9869f006c5405ee4a1a65267653eb7e286123e5e1afde4c826040516116ef91906121fb565b60405180910390a250505b5050505050565b600080604083901c905060008390508067ffffffffffffffff1660c960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906117b09061232b565b91905055149250505092915050565b6000819050919050565b6000819050919050565b6117dc8161130d565b61181b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611812906135d5565b60405180910390fd5b806118487f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b6117bf565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61189583611af5565b6000825111806118a25750805b156118b3576118b18383611b44565b505b505050565b600033905090565b600060019054906101000a900460ff1661190f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190690613243565b60405180910390fd5b61191f61191a6118b8565b611247565b565b6060600061192e83611b71565b9050600083602001359050600061195385806040019061194e9190612eeb565b611b81565b9050600061196f86806060019061196a9190612eeb565b611b81565b905060008660800135905060008760a00135905060008860c00135905060008960e00135905060008a6101000135905060006119ba8c8061012001906119b59190612eeb565b611b81565b9050898989898989898989896040516020016119df9a999897969594939291906135f5565b6040516020818303038152906040529a5050505050505050505050919050565b6000806000845160208601878987f19050949350505050565b60603d82811115611a27578290505b604051602082018101604052818152816000602083013e8092505050919050565b6000808484600090601492611a5f93929190613485565b90611a6a9190613504565b60601c9050600085856014908092611a8493929190613485565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505090506000602060008351602085016000878af19050600051935080611aeb57600093505b5050509392505050565b611afe816117d3565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b6060611b69838360405180606001604052806027815260200161376860279139611b98565b905092915050565b6000808235905080915050919050565b600060405182808583378082209250505092915050565b60606000808573ffffffffffffffffffffffffffffffffffffffff1685604051611bc291906136c2565b600060405180830381855af49150503d8060008114611bfd576040519150601f19603f3d011682016040523d82523d6000602084013e611c02565b606091505b5091509150611c1386838387611c1e565b925050509392505050565b60608315611c80576000835103611c7857611c388561130d565b611c77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6e90613725565b60405180910390fd5b5b829050611c8b565b611c8a8383611c93565b5b949350505050565b600082511115611ca65781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cda9190613745565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b600080fd5b60006101608284031215611d1357611d12611cf7565b5b81905092915050565b600060208284031215611d3257611d31611ced565b5b600082013567ffffffffffffffff811115611d5057611d4f611cf2565b5b611d5c84828501611cfc565b91505092915050565b600077ffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b611d9281611d65565b8114611d9d57600080fd5b50565b600081359050611daf81611d89565b92915050565b600060208284031215611dcb57611dca611ced565b5b6000611dd984828501611da0565b91505092915050565b6000819050919050565b611df581611de2565b8114611e0057600080fd5b50565b600081359050611e1281611dec565b92915050565b60008060408385031215611e2f57611e2e611ced565b5b600083013567ffffffffffffffff811115611e4d57611e4c611cf2565b5b611e5985828601611cfc565b9250506020611e6a85828601611e03565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611e9f82611e74565b9050919050565b611eaf81611e94565b8114611eba57600080fd5b50565b600081359050611ecc81611ea6565b92915050565b60008060408385031215611ee957611ee8611ced565b5b6000611ef785828601611ebd565b9250506020611f0885828601611da0565b9150509250929050565b6000819050919050565b611f2581611f12565b82525050565b6000602082019050611f406000830184611f1c565b92915050565b600060208284031215611f5c57611f5b611ced565b5b6000611f6a84828501611ebd565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611fc682611f7d565b810181811067ffffffffffffffff82111715611fe557611fe4611f8e565b5b80604052505050565b6000611ff8611ce3565b90506120048282611fbd565b919050565b600067ffffffffffffffff82111561202457612023611f8e565b5b61202d82611f7d565b9050602081019050919050565b82818337600083830152505050565b600061205c61205784612009565b611fee565b90508281526020810184848401111561207857612077611f78565b5b61208384828561203a565b509392505050565b600082601f8301126120a05761209f611f73565b5b81356120b0848260208601612049565b91505092915050565b600080604083850312156120d0576120cf611ced565b5b60006120de85828601611ebd565b925050602083013567ffffffffffffffff8111156120ff576120fe611cf2565b5b61210b8582860161208b565b9150509250929050565b61211e81611de2565b82525050565b60006020820190506121396000830184612115565b92915050565b600080fd5b600080fd5b60008083601f84011261215f5761215e611f73565b5b8235905067ffffffffffffffff81111561217c5761217b61213f565b5b60208301915083602082028301111561219857612197612144565b5b9250929050565b600080602083850312156121b6576121b5611ced565b5b600083013567ffffffffffffffff8111156121d4576121d3611cf2565b5b6121e085828601612149565b92509250509250929050565b6121f581611e94565b82525050565b600060208201905061221060008301846121ec565b92915050565b60008083601f84011261222c5761222b611f73565b5b8235905067ffffffffffffffff8111156122495761224861213f565b5b60208301915083600182028301111561226557612264612144565b5b9250929050565b6000806000806060858703121561228657612285611ced565b5b600085013567ffffffffffffffff8111156122a4576122a3611cf2565b5b6122b087828801611cfc565b94505060206122c187828801611ebd565b935050604085013567ffffffffffffffff8111156122e2576122e1611cf2565b5b6122ee87828801612216565b925092505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061233682611f12565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612368576123676122fc565b5b600182019050919050565b600082825260208201905092915050565b7f6f6e6c792062652063616c6c2062792073656c66000000000000000000000000600082015250565b60006123ba601483612373565b91506123c582612384565b602082019050919050565b600060208201905081810360008301526123e9816123ad565b9050919050565b60006123fb82611f12565b915061240683611f12565b925082820190508082111561241e5761241d6122fc565b5b92915050565b600061242f82611f12565b915061243a83611f12565b925082820261244881611f12565b9150828204841483151761245f5761245e6122fc565b5b5092915050565b7f62616c616e6365206e6f7420656e6f7567680000000000000000000000000000600082015250565b600061249c601283612373565b91506124a782612466565b602082019050919050565b600060208201905081810360008301526124cb8161248f565b9050919050565b60006124e16020840184611ebd565b905092915050565b6124f281611e94565b82525050565b61250181611f12565b811461250c57600080fd5b50565b60008135905061251e816124f8565b92915050565b6000612533602084018461250f565b905092915050565b61254481611f12565b82525050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261257657612575612554565b5b83810192508235915060208301925067ffffffffffffffff82111561259e5761259d61254a565b5b6001820236038313156125b4576125b361254f565b5b509250929050565b600082825260208201905092915050565b60006125d983856125bc565b93506125e683858461203a565b6125ef83611f7d565b840190509392505050565b6000610160830161260e60008401846124d2565b61261b60008601826124e9565b506126296020840184612524565b612636602086018261253b565b506126446040840184612559565b85830360408701526126578382846125cd565b925050506126686060840184612559565b858303606087015261267b8382846125cd565b9250505061268c6080840184612524565b612699608086018261253b565b506126a760a0840184612524565b6126b460a086018261253b565b506126c260c0840184612524565b6126cf60c086018261253b565b506126dd60e0840184612524565b6126ea60e086018261253b565b506126f9610100840184612524565b61270761010086018261253b565b50612716610120840184612559565b85830361012087015261272a8382846125cd565b9250505061273c610140840184612559565b8583036101408701526127508382846125cd565b925050508091505092915050565b6000819050919050565b6000819050919050565b600061278d6127886127838461275e565b612768565b611f12565b9050919050565b61279d81612772565b82525050565b600060608201905081810360008301526127bd81866125fa565b90506127cc6020830185612115565b6127d96040830184612794565b949350505050565b6000815190506127f0816124f8565b92915050565b60006020828403121561280c5761280b611ced565b5b600061281a848285016127e1565b91505092915050565b7f7369676e6174757265206572726f722100000000000000000000000000000000600082015250565b6000612859601083612373565b915061286482612823565b602082019050919050565b600060208201905081810360008301526128888161284c565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b60006128eb602c83612373565b91506128f68261288f565b604082019050919050565b6000602082019050818103600083015261291a816128de565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b600061297d602c83612373565b915061298882612921565b604082019050919050565b600060208201905081810360008301526129ac81612970565b9050919050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b6000612a0f603883612373565b9150612a1a826129b3565b604082019050919050565b60006020820190508181036000830152612a3e81612a02565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b60008235600161016003833603038112612aa057612a9f612a74565b5b80830191505092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612b08602e83612373565b9150612b1382612aac565b604082019050919050565b60006020820190508181036000830152612b3781612afb565b9050919050565b6000819050919050565b600060ff82169050919050565b6000612b70612b6b612b6684612b3e565b612768565b612b48565b9050919050565b612b8081612b55565b82525050565b6000602082019050612b9b6000830184612b77565b92915050565b60006040820190508181036000830152612bbb81856125fa565b9050612bca6020830184612115565b9392505050565b600081905092915050565b6000612be88385612bd1565b9350612bf583858461203a565b82840190509392505050565b6000612c0e828486612bdc565b91508190509392505050565b6000612c2582611f12565b9150612c3083611f12565b9250828203905081811115612c4857612c476122fc565b5b92915050565b60008115159050919050565b612c6381612c4e565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612ca3578082015181840152602081019050612c88565b60008484015250505050565b6000612cba82612c69565b612cc48185612c74565b9350612cd4818560208601612c85565b612cdd81611f7d565b840191505092915050565b6000606082019050612cfd6000830186611f1c565b612d0a6020830185612c5a565b8181036040830152612d1c8184612caf565b9050949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612d82602683612373565b9150612d8d82612d26565b604082019050919050565b60006020820190508181036000830152612db181612d75565b9050919050565b60008160e01c9050919050565b600060033d1115612de45760046000803e612de1600051612db8565b90505b90565b600060443d10612e7457612df9611ce3565b60043d036004823e80513d602482011167ffffffffffffffff82111715612e21575050612e74565b808201805167ffffffffffffffff811115612e3f5750505050612e74565b80602083010160043d038501811115612e5c575050505050612e74565b612e6b82602001850186611fbd565b82955050505050505b90565b600081519050919050565b6000612e8d82612e77565b612e978185612373565b9350612ea7818560208601612c85565b612eb081611f7d565b840191505092915050565b6000604082019050612ed060008301856121ec565b8181036020830152612ee28184612e82565b90509392505050565b60008083356001602003843603038112612f0857612f07612a74565b5b80840192508235915067ffffffffffffffff821115612f2a57612f29612a79565b5b602083019250600182023603831315612f4657612f45612a7e565b5b509250929050565b7f4141323520696e76616c6964206163636f756e74206e6f6e6365000000000000600082015250565b6000612f84601a83612373565b9150612f8f82612f4e565b602082019050919050565b6000604082019050612faf6000830184611f1c565b8181036020830152612fc081612f77565b905092915050565b6000606082019050612fdd6000830186611f1c565b612fea6020830185612c5a565b612ff76040830184611f1c565b949350505050565b60008151905061300e81611dec565b92915050565b60006020828403121561302a57613029611ced565b5b600061303884828501612fff565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b600061309d602e83612373565b91506130a882613041565b604082019050919050565b600060208201905081810360008301526130cc81613090565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b600061312f602983612373565b915061313a826130d3565b604082019050919050565b6000602082019050818103600083015261315e81613122565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061319b602083612373565b91506131a682613165565b602082019050919050565b600060208201905081810360008301526131ca8161318e565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061322d602b83612373565b9150613238826131d1565b604082019050919050565b6000602082019050818103600083015261325c81613220565b9050919050565b60006040820190506132786000830185611f1c565b818103602083015261328a8184612caf565b90509392505050565b7f414131302073656e64657220616c726561647920636f6e737472756374656400600082015250565b60006132c9601f83612373565b91506132d482613293565b602082019050919050565b60006040820190506132f46000830184611f1c565b8181036020830152613305816132bc565b905092915050565b7f4141313320696e6974436f6465206661696c6564206f72204f4f470000000000600082015250565b6000613343601b83612373565b915061334e8261330d565b602082019050919050565b600060408201905061336e6000830184611f1c565b818103602083015261337f81613336565b905092915050565b7f4141313420696e6974436f6465206d7573742072657475726e2073656e646572600082015250565b60006133bd602083612373565b91506133c882613387565b602082019050919050565b60006040820190506133e86000830184611f1c565b81810360208301526133f9816133b0565b905092915050565b7f4141313520696e6974436f6465206d757374206372656174652073656e646572600082015250565b6000613437602083612373565b915061344282613401565b602082019050919050565b60006040820190506134626000830184611f1c565b81810360208301526134738161342a565b905092915050565b600080fd5b600080fd5b600080858511156134995761349861347b565b5b838611156134aa576134a9613480565b5b6001850283019150848603905094509492505050565b600082905092915050565b60007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082169050919050565b600082821b905092915050565b600061351083836134c0565b8261351b81356134cb565b9250601482101561355b576135567fffffffffffffffffffffffffffffffffffffffff000000000000000000000000836014036008026134f7565b831692505b505092915050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b60006135bf602d83612373565b91506135ca82613563565b604082019050919050565b600060208201905081810360008301526135ee816135b2565b9050919050565b60006101408201905061360b600083018d6121ec565b613618602083018c611f1c565b613625604083018b612115565b613632606083018a612115565b61363f6080830189611f1c565b61364c60a0830188611f1c565b61365960c0830187611f1c565b61366660e0830186611f1c565b613674610100830185611f1c565b613682610120830184612115565b9b9a5050505050505050505050565b600061369c82612c69565b6136a68185612bd1565b93506136b6818560208601612c85565b80840191505092915050565b60006136ce8284613691565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061370f601d83612373565b915061371a826136d9565b602082019050919050565b6000602082019050818103600083015261373e81613702565b9050919050565b6000602082019050818103600083015261375f8184612e82565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220dea94f00b962c925528ec9fc6f9fa5b8d9ce8dc71f8ca48d58a268ea64f0e4c464736f6c63430008120033";

    public static final String FUNC__VALIDATEUSEROP = "_validateUserOp";

    public static final String FUNC_GETNONCE = "getNonce";

    public static final String FUNC_HANDLEOP = "handleOp";

    public static final String FUNC_HANDLEOPS = "handleOps";

    public static final String FUNC_INCREMENTNONCE = "incrementNonce";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_NONCESEQUENCENUMBER = "nonceSequenceNumber";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PROXIABLEUUID = "proxiableUUID";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SIMULATEHANDLEOP = "simulateHandleOp";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UPGRADETO = "upgradeTo";

    public static final String FUNC_UPGRADETOANDCALL = "upgradeToAndCall";

    public static final Event ACCOUNTDEPLOYED_EVENT = new Event("AccountDeployed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}));
    ;

    public static final Event ADMINCHANGED_EVENT = new Event("AdminChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event BEACONUPGRADED_EVENT = new Event("BeaconUpgraded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event INITIALIZED_EVENT = new Event("Initialized", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event UPGRADED_EVENT = new Event("Upgraded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event USEROPERATIONEVENT_EVENT = new Event("UserOperationEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event USEROPERATIONREVERTREASON_EVENT = new Event("UserOperationRevertReason", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected EntryPoint(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected EntryPoint(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected EntryPoint(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected EntryPoint(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<AccountDeployedEventResponse> getAccountDeployedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ACCOUNTDEPLOYED_EVENT, transactionReceipt);
        ArrayList<AccountDeployedEventResponse> responses = new ArrayList<AccountDeployedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AccountDeployedEventResponse typedResponse = new AccountDeployedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.factory = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AccountDeployedEventResponse getAccountDeployedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ACCOUNTDEPLOYED_EVENT, log);
        AccountDeployedEventResponse typedResponse = new AccountDeployedEventResponse();
        typedResponse.log = log;
        typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.factory = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<AccountDeployedEventResponse> accountDeployedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAccountDeployedEventFromLog(log));
    }

    public Flowable<AccountDeployedEventResponse> accountDeployedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ACCOUNTDEPLOYED_EVENT));
        return accountDeployedEventFlowable(filter);
    }

    public static List<AdminChangedEventResponse> getAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<AdminChangedEventResponse> responses = new ArrayList<AdminChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AdminChangedEventResponse typedResponse = new AdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousAdmin = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AdminChangedEventResponse getAdminChangedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ADMINCHANGED_EVENT, log);
        AdminChangedEventResponse typedResponse = new AdminChangedEventResponse();
        typedResponse.log = log;
        typedResponse.previousAdmin = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.newAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<AdminChangedEventResponse> adminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAdminChangedEventFromLog(log));
    }

    public Flowable<AdminChangedEventResponse> adminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADMINCHANGED_EVENT));
        return adminChangedEventFlowable(filter);
    }

    public static List<BeaconUpgradedEventResponse> getBeaconUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BEACONUPGRADED_EVENT, transactionReceipt);
        ArrayList<BeaconUpgradedEventResponse> responses = new ArrayList<BeaconUpgradedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BeaconUpgradedEventResponse typedResponse = new BeaconUpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beacon = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static BeaconUpgradedEventResponse getBeaconUpgradedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(BEACONUPGRADED_EVENT, log);
        BeaconUpgradedEventResponse typedResponse = new BeaconUpgradedEventResponse();
        typedResponse.log = log;
        typedResponse.beacon = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<BeaconUpgradedEventResponse> beaconUpgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getBeaconUpgradedEventFromLog(log));
    }

    public Flowable<BeaconUpgradedEventResponse> beaconUpgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BEACONUPGRADED_EVENT));
        return beaconUpgradedEventFlowable(filter);
    }

    public static List<InitializedEventResponse> getInitializedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INITIALIZED_EVENT, transactionReceipt);
        ArrayList<InitializedEventResponse> responses = new ArrayList<InitializedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InitializedEventResponse typedResponse = new InitializedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InitializedEventResponse getInitializedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INITIALIZED_EVENT, log);
        InitializedEventResponse typedResponse = new InitializedEventResponse();
        typedResponse.log = log;
        typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInitializedEventFromLog(log));
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INITIALIZED_EVENT));
        return initializedEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<UpgradedEventResponse> getUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UPGRADED_EVENT, transactionReceipt);
        ArrayList<UpgradedEventResponse> responses = new ArrayList<UpgradedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpgradedEventResponse typedResponse = new UpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UpgradedEventResponse getUpgradedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UPGRADED_EVENT, log);
        UpgradedEventResponse typedResponse = new UpgradedEventResponse();
        typedResponse.log = log;
        typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUpgradedEventFromLog(log));
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPGRADED_EVENT));
        return upgradedEventFlowable(filter);
    }

    public static List<UserOperationEventEventResponse> getUserOperationEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(USEROPERATIONEVENT_EVENT, transactionReceipt);
        ArrayList<UserOperationEventEventResponse> responses = new ArrayList<UserOperationEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserOperationEventEventResponse typedResponse = new UserOperationEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.userOpHash = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.nonce = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.success = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.actualGasCost = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UserOperationEventEventResponse getUserOperationEventEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(USEROPERATIONEVENT_EVENT, log);
        UserOperationEventEventResponse typedResponse = new UserOperationEventEventResponse();
        typedResponse.log = log;
        typedResponse.userOpHash = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.sender = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.nonce = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.success = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.actualGasCost = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<UserOperationEventEventResponse> userOperationEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUserOperationEventEventFromLog(log));
    }

    public Flowable<UserOperationEventEventResponse> userOperationEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(USEROPERATIONEVENT_EVENT));
        return userOperationEventEventFlowable(filter);
    }

    public static List<UserOperationRevertReasonEventResponse> getUserOperationRevertReasonEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(USEROPERATIONREVERTREASON_EVENT, transactionReceipt);
        ArrayList<UserOperationRevertReasonEventResponse> responses = new ArrayList<UserOperationRevertReasonEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserOperationRevertReasonEventResponse typedResponse = new UserOperationRevertReasonEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.nonce = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.revertReason = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UserOperationRevertReasonEventResponse getUserOperationRevertReasonEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(USEROPERATIONREVERTREASON_EVENT, log);
        UserOperationRevertReasonEventResponse typedResponse = new UserOperationRevertReasonEventResponse();
        typedResponse.log = log;
        typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.nonce = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.revertReason = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<UserOperationRevertReasonEventResponse> userOperationRevertReasonEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUserOperationRevertReasonEventFromLog(log));
    }

    public Flowable<UserOperationRevertReasonEventResponse> userOperationRevertReasonEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(USEROPERATIONREVERTREASON_EVENT));
        return userOperationRevertReasonEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> _validateUserOp(UserOperation userOp, byte[] hashData) {
        final Function function = new Function(
                FUNC__VALIDATEUSEROP, 
                Arrays.<Type>asList(userOp, 
                new org.web3j.abi.datatypes.generated.Bytes32(hashData)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getNonce(String sender, BigInteger key) {
        final Function function = new Function(FUNC_GETNONCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(sender), 
                new org.web3j.abi.datatypes.generated.Uint192(key)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> handleOp(UserOperation userOP) {
        final Function function = new Function(
                FUNC_HANDLEOP, 
                Arrays.<Type>asList(userOP), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> handleOps(List<UserOperation> userOPs) {
        final Function function = new Function(
                FUNC_HANDLEOPS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<UserOperation>(UserOperation.class, userOPs)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> incrementNonce(BigInteger key) {
        final Function function = new Function(
                FUNC_INCREMENTNONCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint192(key)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize() {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> nonceSequenceNumber(String param0, BigInteger param1) {
        final Function function = new Function(FUNC_NONCESEQUENCENUMBER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0), 
                new org.web3j.abi.datatypes.generated.Uint192(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> proxiableUUID() {
        final Function function = new Function(FUNC_PROXIABLEUUID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> simulateHandleOp(UserOperation op, String target, byte[] targetCallData) {
        final Function function = new Function(
                FUNC_SIMULATEHANDLEOP, 
                Arrays.<Type>asList(op, 
                new org.web3j.abi.datatypes.Address(target), 
                new org.web3j.abi.datatypes.DynamicBytes(targetCallData)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeTo(String newImplementation) {
        final Function function = new Function(
                FUNC_UPGRADETO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newImplementation)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeToAndCall(String newImplementation, byte[] data, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_UPGRADETOANDCALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newImplementation), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    @Deprecated
    public static EntryPoint load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new EntryPoint(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static EntryPoint load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new EntryPoint(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static EntryPoint load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new EntryPoint(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static EntryPoint load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new EntryPoint(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<EntryPoint> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(EntryPoint.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<EntryPoint> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(EntryPoint.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<EntryPoint> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(EntryPoint.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<EntryPoint> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(EntryPoint.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class UserOperation extends DynamicStruct {
        public String sender;

        public BigInteger nonce;

        public byte[] initCode;

        public byte[] callData;

        public BigInteger callGasLimit;

        public BigInteger verificationGasLimit;

        public BigInteger preVerificationGas;

        public BigInteger maxFeePerGas;

        public BigInteger maxPriorityFeePerGas;

        public byte[] paymasterAndData;

        public byte[] signature;

        public UserOperation(String sender, BigInteger nonce, byte[] initCode, byte[] callData, BigInteger callGasLimit, BigInteger verificationGasLimit, BigInteger preVerificationGas, BigInteger maxFeePerGas, BigInteger maxPriorityFeePerGas, byte[] paymasterAndData, byte[] signature) {
            super(new org.web3j.abi.datatypes.Address(sender), 
                    new org.web3j.abi.datatypes.generated.Uint256(nonce), 
                    new org.web3j.abi.datatypes.DynamicBytes(initCode), 
                    new org.web3j.abi.datatypes.DynamicBytes(callData), 
                    new org.web3j.abi.datatypes.generated.Uint256(callGasLimit), 
                    new org.web3j.abi.datatypes.generated.Uint256(verificationGasLimit), 
                    new org.web3j.abi.datatypes.generated.Uint256(preVerificationGas), 
                    new org.web3j.abi.datatypes.generated.Uint256(maxFeePerGas), 
                    new org.web3j.abi.datatypes.generated.Uint256(maxPriorityFeePerGas), 
                    new org.web3j.abi.datatypes.DynamicBytes(paymasterAndData), 
                    new org.web3j.abi.datatypes.DynamicBytes(signature));
            this.sender = sender;
            this.nonce = nonce;
            this.initCode = initCode;
            this.callData = callData;
            this.callGasLimit = callGasLimit;
            this.verificationGasLimit = verificationGasLimit;
            this.preVerificationGas = preVerificationGas;
            this.maxFeePerGas = maxFeePerGas;
            this.maxPriorityFeePerGas = maxPriorityFeePerGas;
            this.paymasterAndData = paymasterAndData;
            this.signature = signature;
        }

        public UserOperation(Address sender, Uint256 nonce, DynamicBytes initCode, DynamicBytes callData, Uint256 callGasLimit, Uint256 verificationGasLimit, Uint256 preVerificationGas, Uint256 maxFeePerGas, Uint256 maxPriorityFeePerGas, DynamicBytes paymasterAndData, DynamicBytes signature) {
            super(sender, nonce, initCode, callData, callGasLimit, verificationGasLimit, preVerificationGas, maxFeePerGas, maxPriorityFeePerGas, paymasterAndData, signature);
            this.sender = sender.getValue();
            this.nonce = nonce.getValue();
            this.initCode = initCode.getValue();
            this.callData = callData.getValue();
            this.callGasLimit = callGasLimit.getValue();
            this.verificationGasLimit = verificationGasLimit.getValue();
            this.preVerificationGas = preVerificationGas.getValue();
            this.maxFeePerGas = maxFeePerGas.getValue();
            this.maxPriorityFeePerGas = maxPriorityFeePerGas.getValue();
            this.paymasterAndData = paymasterAndData.getValue();
            this.signature = signature.getValue();
        }
    }

    public static class AccountDeployedEventResponse extends BaseEventResponse {
        public String sender;

        public String factory;
    }

    public static class AdminChangedEventResponse extends BaseEventResponse {
        public String previousAdmin;

        public String newAdmin;
    }

    public static class BeaconUpgradedEventResponse extends BaseEventResponse {
        public String beacon;
    }

    public static class InitializedEventResponse extends BaseEventResponse {
        public BigInteger version;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class UpgradedEventResponse extends BaseEventResponse {
        public String implementation;
    }

    public static class UserOperationEventEventResponse extends BaseEventResponse {
        public byte[] userOpHash;

        public String sender;

        public BigInteger nonce;

        public Boolean success;

        public BigInteger actualGasCost;
    }

    public static class UserOperationRevertReasonEventResponse extends BaseEventResponse {
        public String sender;

        public BigInteger nonce;

        public byte[] revertReason;
    }
}
