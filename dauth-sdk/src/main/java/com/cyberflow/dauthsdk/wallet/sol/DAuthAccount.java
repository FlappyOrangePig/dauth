package com.cyberflow.dauthsdk.wallet.sol;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Bytes4;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.2.
 */
@SuppressWarnings("rawtypes")
public class DAuthAccount extends Contract {
    public static final String BINARY = "0x60c06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff168152503480156200004457600080fd5b506040516200387a3803806200387a83398181016040528101906200006a9190620001f9565b8073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1681525050620000ae620000b560201b60201c565b506200030f565b600060019054906101000a900460ff161562000108576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000ff90620002b2565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff1614620001795760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620001709190620002f2565b60405180910390a15b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001ad8262000180565b9050919050565b6000620001c182620001a0565b9050919050565b620001d381620001b4565b8114620001df57600080fd5b50565b600081519050620001f381620001c8565b92915050565b6000602082840312156200021257620002116200017b565b5b60006200022284828501620001e2565b91505092915050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006200029a6027836200022b565b9150620002a7826200023c565b604082019050919050565b60006020820190508181036000830152620002cd816200028b565b9050919050565b600060ff82169050919050565b620002ec81620002d4565b82525050565b6000602082019050620003096000830184620002e1565b92915050565b60805160a0516135226200035860003960008181610a0201526113a301526000818161062a015281816106b8015281816107e501528181610873015261092301526135226000f3fe6080604052600436106100eb5760003560e01c806352d1902d1161008a578063bc197c8111610059578063bc197c81146102ef578063c4d66de81461032c578063d087d28814610355578063f23a6e6114610380576100f2565b806352d1902d146102455780638da5cb5b14610270578063b0d691fe1461029b578063b61d27f6146102c6576100f2565b806318dfb3c7116100c657806318dfb3c71461019a5780633659cfe6146101c35780633a871cdd146101ec5780634f1ef28614610229576100f2565b806223de29146100f757806301ffc9a714610120578063150b7a021461015d576100f2565b366100f257005b600080fd5b34801561010357600080fd5b5061011e60048036038101906101199190611edd565b6103bd565b005b34801561012c57600080fd5b5061014760048036038101906101429190612004565b6103c7565b604051610154919061204c565b60405180910390f35b34801561016957600080fd5b50610184600480360381019061017f9190612067565b610501565b60405161019191906120fe565b60405180910390f35b3480156101a657600080fd5b506101c160048036038101906101bc91906121c5565b610516565b005b3480156101cf57600080fd5b506101ea60048036038101906101e59190612246565b610628565b005b3480156101f857600080fd5b50610213600480360381019061020e91906122ce565b6107b0565b604051610220919061234c565b60405180910390f35b610243600480360381019061023e91906124a8565b6107e3565b005b34801561025157600080fd5b5061025a61091f565b6040516102679190612513565b60405180910390f35b34801561027c57600080fd5b506102856109d8565b604051610292919061253d565b60405180910390f35b3480156102a757600080fd5b506102b06109fe565b6040516102bd91906125b7565b60405180910390f35b3480156102d257600080fd5b506102ed60048036038101906102e891906125d2565b610a26565b005b3480156102fb57600080fd5b506103166004803603810190610311919061269c565b610a83565b60405161032391906120fe565b60405180910390f35b34801561033857600080fd5b50610353600480360381019061034e9190612246565b610a9b565b005b34801561036157600080fd5b5061036a610c2a565b604051610377919061234c565b60405180910390f35b34801561038c57600080fd5b506103a760048036038101906103a29190612778565b610cb5565b6040516103b491906120fe565b60405180910390f35b5050505050505050565b60007f150b7a02000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061049257507f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104fa57507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b600063150b7a0260e01b905095945050505050565b61051e610ccb565b818190508484905014610566576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055d9061286f565b60405180910390fd5b60005b848490508110156106215761060e85858381811061058a5761058961288f565b5b905060200201602081019061059f9190612246565b60008585858181106105b4576105b361288f565b5b90506020028101906105c691906128cd565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610d9a565b80806106199061295f565b915050610569565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16036106b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ad90612a19565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166106f5610e1e565b73ffffffffffffffffffffffffffffffffffffffff161461074b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074290612aab565b60405180910390fd5b61075481610e75565b6107ad81600067ffffffffffffffff8111156107735761077261237d565b5b6040519080825280601f01601f1916602001820160405280156107a55781602001600182028036833780820191505090505b506000610eed565b50565b60006107ba61105b565b6107c484846110d2565b90506107d38460200135611265565b6107dc82611268565b9392505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1603610871576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086890612a19565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166108b0610e1e565b73ffffffffffffffffffffffffffffffffffffffff1614610906576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fd90612aab565b60405180910390fd5b61090f82610e75565b61091b82826001610eed565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146109af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a690612b3d565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b610a2e610ccb565b610a7d848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610d9a565b50505050565b600063bc197c8160e01b905098975050505050505050565b60008060019054906101000a900460ff16159050808015610acc5750600160008054906101000a900460ff1660ff16105b80610af95750610adb30611304565b158015610af85750600160008054906101000a900460ff1660ff16145b5b610b38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2f90612bcf565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610b75576001600060016101000a81548160ff0219169083151502179055505b610b7e82611327565b610b8733611407565b610bcd6040518060400160405280600e81526020017f6163636f756e742061646d696e3a000000000000000000000000000000000000815250610bc8611453565b6114aa565b8015610c265760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610c1d9190612c37565b60405180910390a15b5050565b6000610c346109fe565b73ffffffffffffffffffffffffffffffffffffffff166335567e1a3060006040518363ffffffff1660e01b8152600401610c6f929190612cb1565b602060405180830381865afa158015610c8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb09190612cef565b905090565b600063f23a6e6160e01b90509695505050505050565b610cd36109fe565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610d595750600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610d98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8f90612d68565b60405180910390fd5b565b6000808473ffffffffffffffffffffffffffffffffffffffff168484604051610dc39190612df9565b60006040518083038185875af1925050503d8060008114610e00576040519150601f19603f3d011682016040523d82523d6000602084013e610e05565b606091505b509150915081610e1757805160208201fd5b5050505050565b6000610e4c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b611546565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff16610e94611453565b73ffffffffffffffffffffffffffffffffffffffff1614610eea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee190612e5c565b60405180910390fd5b50565b610f197f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b611550565b60000160009054906101000a900460ff1615610f3d57610f388361155a565b611056565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610fa557506040513d601f19601f82011682018060405250810190610fa29190612e91565b60015b610fe4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fdb90612f30565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b8114611049576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104090612fc2565b60405180910390fd5b50611055838383611613565b5b505050565b6110636109fe565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c79061302e565b60405180910390fd5b565b6000806110de8361163f565b905061111e6040518060400160405280601281526020017f5f76616c69646174655369676e61747572650000000000000000000000000000815250611675565b6111278161170e565b6111956111908580610140019061113e91906128cd565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050836117a790919063ffffffff16565b6117ce565b6111fb848061014001906111a991906128cd565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050826117a790919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461125957600191505061125f565b60009150505b92915050565b50565b600081146113015760003373ffffffffffffffffffffffffffffffffffffffff16827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff906040516112b890613074565b600060405180830381858888f193505050503d80600081146112f6576040519150601f19603f3d011682016040523d82523d6000602084013e6112fb565b606091505b50509050505b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b80600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167f2984971f9f840be64c4350109dc88eebe35e5e24d46daab1dc8dc0fe9f9842df60405160405180910390a350565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f611430611453565b8260405161143f929190613089565b60405180910390a161145081611867565b50565b60006114817fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610360001b611546565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61154282826040516024016114c09291906130f6565b6040516020818303038152906040527f319af333000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611947565b5050565b6000819050919050565b6000819050919050565b61156381611304565b6115a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159990613198565b60405180910390fd5b806115cf7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b611546565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61161c83611970565b6000825111806116295750805b1561163a5761163883836119bf565b505b505050565b60007f19457468657265756d205369676e6564204d6573736167653a0a33320000000060005281601c52603c6000209050919050565b61170b8160405160240161168991906131b8565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611947565b50565b6117a4816040516024016117229190612513565b6040516020818303038152906040527f27b7cf85000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611947565b50565b60008060006117b685856119ec565b915091506117c381611a3d565b819250505092915050565b611864816040516024016117e2919061253d565b6040516020818303038152906040527f2c2ecbc2000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611947565b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036118d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118cd9061324c565b60405180910390fd5b806119037fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610360001b611546565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b6119798161155a565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b60606119e483836040518060600160405280602781526020016134c660279139611ba3565b905092915050565b6000806041835103611a2d5760008060006020860151925060408601519150606086015160001a9050611a2187828585611c29565b94509450505050611a36565b60006002915091505b9250929050565b60006004811115611a5157611a5061326c565b5b816004811115611a6457611a6361326c565b5b0315611ba05760016004811115611a7e57611a7d61326c565b5b816004811115611a9157611a9061326c565b5b03611ad1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac8906132e7565b60405180910390fd5b60026004811115611ae557611ae461326c565b5b816004811115611af857611af761326c565b5b03611b38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2f90613353565b60405180910390fd5b60036004811115611b4c57611b4b61326c565b5b816004811115611b5f57611b5e61326c565b5b03611b9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b96906133e5565b60405180910390fd5b5b50565b60606000808573ffffffffffffffffffffffffffffffffffffffff1685604051611bcd9190612df9565b600060405180830381855af49150503d8060008114611c08576040519150601f19603f3d011682016040523d82523d6000602084013e611c0d565b606091505b5091509150611c1e86838387611d0b565b925050509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115611c64576000600391509150611d02565b600060018787878760405160008152602001604052604051611c899493929190613414565b6020604051602081039080840390855afa158015611cab573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611cf957600060019250925050611d02565b80600092509250505b94509492505050565b60608315611d6d576000835103611d6557611d2585611304565b611d64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5b906134a5565b60405180910390fd5b5b829050611d78565b611d778383611d80565b5b949350505050565b600082511115611d935781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dc791906131b8565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611e0f82611de4565b9050919050565b611e1f81611e04565b8114611e2a57600080fd5b50565b600081359050611e3c81611e16565b92915050565b6000819050919050565b611e5581611e42565b8114611e6057600080fd5b50565b600081359050611e7281611e4c565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611e9d57611e9c611e78565b5b8235905067ffffffffffffffff811115611eba57611eb9611e7d565b5b602083019150836001820283011115611ed657611ed5611e82565b5b9250929050565b60008060008060008060008060c0898b031215611efd57611efc611dda565b5b6000611f0b8b828c01611e2d565b9850506020611f1c8b828c01611e2d565b9750506040611f2d8b828c01611e2d565b9650506060611f3e8b828c01611e63565b955050608089013567ffffffffffffffff811115611f5f57611f5e611ddf565b5b611f6b8b828c01611e87565b945094505060a089013567ffffffffffffffff811115611f8e57611f8d611ddf565b5b611f9a8b828c01611e87565b92509250509295985092959890939650565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611fe181611fac565b8114611fec57600080fd5b50565b600081359050611ffe81611fd8565b92915050565b60006020828403121561201a57612019611dda565b5b600061202884828501611fef565b91505092915050565b60008115159050919050565b61204681612031565b82525050565b6000602082019050612061600083018461203d565b92915050565b60008060008060006080868803121561208357612082611dda565b5b600061209188828901611e2d565b95505060206120a288828901611e2d565b94505060406120b388828901611e63565b935050606086013567ffffffffffffffff8111156120d4576120d3611ddf565b5b6120e088828901611e87565b92509250509295509295909350565b6120f881611fac565b82525050565b600060208201905061211360008301846120ef565b92915050565b60008083601f84011261212f5761212e611e78565b5b8235905067ffffffffffffffff81111561214c5761214b611e7d565b5b60208301915083602082028301111561216857612167611e82565b5b9250929050565b60008083601f84011261218557612184611e78565b5b8235905067ffffffffffffffff8111156121a2576121a1611e7d565b5b6020830191508360208202830111156121be576121bd611e82565b5b9250929050565b600080600080604085870312156121df576121de611dda565b5b600085013567ffffffffffffffff8111156121fd576121fc611ddf565b5b61220987828801612119565b9450945050602085013567ffffffffffffffff81111561222c5761222b611ddf565b5b6122388782880161216f565b925092505092959194509250565b60006020828403121561225c5761225b611dda565b5b600061226a84828501611e2d565b91505092915050565b600080fd5b6000610160828403121561228f5761228e612273565b5b81905092915050565b6000819050919050565b6122ab81612298565b81146122b657600080fd5b50565b6000813590506122c8816122a2565b92915050565b6000806000606084860312156122e7576122e6611dda565b5b600084013567ffffffffffffffff81111561230557612304611ddf565b5b61231186828701612278565b9350506020612322868287016122b9565b925050604061233386828701611e63565b9150509250925092565b61234681611e42565b82525050565b6000602082019050612361600083018461233d565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6123b58261236c565b810181811067ffffffffffffffff821117156123d4576123d361237d565b5b80604052505050565b60006123e7611dd0565b90506123f382826123ac565b919050565b600067ffffffffffffffff8211156124135761241261237d565b5b61241c8261236c565b9050602081019050919050565b82818337600083830152505050565b600061244b612446846123f8565b6123dd565b90508281526020810184848401111561246757612466612367565b5b612472848285612429565b509392505050565b600082601f83011261248f5761248e611e78565b5b813561249f848260208601612438565b91505092915050565b600080604083850312156124bf576124be611dda565b5b60006124cd85828601611e2d565b925050602083013567ffffffffffffffff8111156124ee576124ed611ddf565b5b6124fa8582860161247a565b9150509250929050565b61250d81612298565b82525050565b60006020820190506125286000830184612504565b92915050565b61253781611e04565b82525050565b6000602082019050612552600083018461252e565b92915050565b6000819050919050565b600061257d61257861257384611de4565b612558565b611de4565b9050919050565b600061258f82612562565b9050919050565b60006125a182612584565b9050919050565b6125b181612596565b82525050565b60006020820190506125cc60008301846125a8565b92915050565b600080600080606085870312156125ec576125eb611dda565b5b60006125fa87828801611e2d565b945050602061260b87828801611e63565b935050604085013567ffffffffffffffff81111561262c5761262b611ddf565b5b61263887828801611e87565b925092505092959194509250565b60008083601f84011261265c5761265b611e78565b5b8235905067ffffffffffffffff81111561267957612678611e7d565b5b60208301915083602082028301111561269557612694611e82565b5b9250929050565b60008060008060008060008060a0898b0312156126bc576126bb611dda565b5b60006126ca8b828c01611e2d565b98505060206126db8b828c01611e2d565b975050604089013567ffffffffffffffff8111156126fc576126fb611ddf565b5b6127088b828c01612646565b9650965050606089013567ffffffffffffffff81111561272b5761272a611ddf565b5b6127378b828c01612646565b9450945050608089013567ffffffffffffffff81111561275a57612759611ddf565b5b6127668b828c01611e87565b92509250509295985092959890939650565b60008060008060008060a0878903121561279557612794611dda565b5b60006127a389828a01611e2d565b96505060206127b489828a01611e2d565b95505060406127c589828a01611e63565b94505060606127d689828a01611e63565b935050608087013567ffffffffffffffff8111156127f7576127f6611ddf565b5b61280389828a01611e87565b92509250509295509295509295565b600082825260208201905092915050565b7f77726f6e67206172726179206c656e6774687300000000000000000000000000600082015250565b6000612859601383612812565b915061286482612823565b602082019050919050565b600060208201905081810360008301526128888161284c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126128ea576128e96128be565b5b80840192508235915067ffffffffffffffff82111561290c5761290b6128c3565b5b602083019250600182023603831315612928576129276128c8565b5b509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061296a82611e42565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361299c5761299b612930565b5b600182019050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000612a03602c83612812565b9150612a0e826129a7565b604082019050919050565b60006020820190508181036000830152612a32816129f6565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b6000612a95602c83612812565b9150612aa082612a39565b604082019050919050565b60006020820190508181036000830152612ac481612a88565b9050919050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b6000612b27603883612812565b9150612b3282612acb565b604082019050919050565b60006020820190508181036000830152612b5681612b1a565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612bb9602e83612812565b9150612bc482612b5d565b604082019050919050565b60006020820190508181036000830152612be881612bac565b9050919050565b6000819050919050565b600060ff82169050919050565b6000612c21612c1c612c1784612bef565b612558565b612bf9565b9050919050565b612c3181612c06565b82525050565b6000602082019050612c4c6000830184612c28565b92915050565b6000819050919050565b600077ffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612c9b612c96612c9184612c52565b612558565b612c5c565b9050919050565b612cab81612c80565b82525050565b6000604082019050612cc6600083018561252e565b612cd36020830184612ca2565b9392505050565b600081519050612ce981611e4c565b92915050565b600060208284031215612d0557612d04611dda565b5b6000612d1384828501612cda565b91505092915050565b7f6163636f756e743a206e6f74204f776e6572206f7220456e747279506f696e74600082015250565b6000612d52602083612812565b9150612d5d82612d1c565b602082019050919050565b60006020820190508181036000830152612d8181612d45565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015612dbc578082015181840152602081019050612da1565b60008484015250505050565b6000612dd382612d88565b612ddd8185612d93565b9350612ded818560208601612d9e565b80840191505092915050565b6000612e058284612dc8565b915081905092915050565b7f6d7573742063616c6c20746869732062792061646d696e000000000000000000600082015250565b6000612e46601783612812565b9150612e5182612e10565b602082019050919050565b60006020820190508181036000830152612e7581612e39565b9050919050565b600081519050612e8b816122a2565b92915050565b600060208284031215612ea757612ea6611dda565b5b6000612eb584828501612e7c565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b6000612f1a602e83612812565b9150612f2582612ebe565b604082019050919050565b60006020820190508181036000830152612f4981612f0d565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b6000612fac602983612812565b9150612fb782612f50565b604082019050919050565b60006020820190508181036000830152612fdb81612f9f565b9050919050565b7f6163636f756e743a206e6f742066726f6d20456e747279506f696e7400000000600082015250565b6000613018601c83612812565b915061302382612fe2565b602082019050919050565b600060208201905081810360008301526130478161300b565b9050919050565b50565b600061305e600083612d93565b91506130698261304e565b600082019050919050565b600061307f82613051565b9150819050919050565b600060408201905061309e600083018561252e565b6130ab602083018461252e565b9392505050565b600081519050919050565b60006130c8826130b2565b6130d28185612812565b93506130e2818560208601612d9e565b6130eb8161236c565b840191505092915050565b6000604082019050818103600083015261311081856130bd565b905061311f602083018461252e565b9392505050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b6000613182602d83612812565b915061318d82613126565b604082019050919050565b600060208201905081810360008301526131b181613175565b9050919050565b600060208201905081810360008301526131d281846130bd565b905092915050565b7f455243313936373a206e65772061646d696e20697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613236602683612812565b9150613241826131da565b604082019050919050565b6000602082019050818103600083015261326581613229565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b60006132d1601883612812565b91506132dc8261329b565b602082019050919050565b60006020820190508181036000830152613300816132c4565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b600061333d601f83612812565b915061334882613307565b602082019050919050565b6000602082019050818103600083015261336c81613330565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006133cf602283612812565b91506133da82613373565b604082019050919050565b600060208201905081810360008301526133fe816133c2565b9050919050565b61340e81612bf9565b82525050565b60006080820190506134296000830187612504565b6134366020830186613405565b6134436040830185612504565b6134506060830184612504565b95945050505050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061348f601d83612812565b915061349a82613459565b602082019050919050565b600060208201905081810360008301526134be81613482565b905091905056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220bf9a46f7481663eaab6455f8948984ea8886c5f5a3021f35c6958e13b3a42fe064736f6c63430008120033";

    public static final String FUNC_ENTRYPOINT = "entryPoint";

    public static final String FUNC_EXECUTE = "execute";

    public static final String FUNC_EXECUTEBATCH = "executeBatch";

    public static final String FUNC_GETNONCE = "getNonce";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_ONERC1155BATCHRECEIVED = "onERC1155BatchReceived";

    public static final String FUNC_ONERC1155RECEIVED = "onERC1155Received";

    public static final String FUNC_ONERC721RECEIVED = "onERC721Received";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PROXIABLEUUID = "proxiableUUID";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_TOKENSRECEIVED = "tokensReceived";

    public static final String FUNC_UPGRADETO = "upgradeTo";

    public static final String FUNC_UPGRADETOANDCALL = "upgradeToAndCall";

    public static final String FUNC_VALIDATEUSEROP = "validateUserOp";

    public static final Event ADMINCHANGED_EVENT = new Event("AdminChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event BEACONUPGRADED_EVENT = new Event("BeaconUpgraded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event DAUTHACCOUNTINITIALIZED_EVENT = new Event("DAuthAccountInitialized", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event INITIALIZED_EVENT = new Event("Initialized", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
    ;

    public static final Event UPGRADED_EVENT = new Event("Upgraded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected DAuthAccount(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DAuthAccount(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DAuthAccount(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DAuthAccount(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<AdminChangedEventResponse> getAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<AdminChangedEventResponse> responses = new ArrayList<AdminChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AdminChangedEventResponse typedResponse = new AdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousAdmin = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AdminChangedEventResponse> adminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AdminChangedEventResponse>() {
            @Override
            public AdminChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADMINCHANGED_EVENT, log);
                AdminChangedEventResponse typedResponse = new AdminChangedEventResponse();
                typedResponse.log = log;
                typedResponse.previousAdmin = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AdminChangedEventResponse> adminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADMINCHANGED_EVENT));
        return adminChangedEventFlowable(filter);
    }

    public static List<BeaconUpgradedEventResponse> getBeaconUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BEACONUPGRADED_EVENT, transactionReceipt);
        ArrayList<BeaconUpgradedEventResponse> responses = new ArrayList<BeaconUpgradedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BeaconUpgradedEventResponse typedResponse = new BeaconUpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beacon = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BeaconUpgradedEventResponse> beaconUpgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BeaconUpgradedEventResponse>() {
            @Override
            public BeaconUpgradedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BEACONUPGRADED_EVENT, log);
                BeaconUpgradedEventResponse typedResponse = new BeaconUpgradedEventResponse();
                typedResponse.log = log;
                typedResponse.beacon = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BeaconUpgradedEventResponse> beaconUpgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BEACONUPGRADED_EVENT));
        return beaconUpgradedEventFlowable(filter);
    }

    public static List<DAuthAccountInitializedEventResponse> getDAuthAccountInitializedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DAUTHACCOUNTINITIALIZED_EVENT, transactionReceipt);
        ArrayList<DAuthAccountInitializedEventResponse> responses = new ArrayList<DAuthAccountInitializedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DAuthAccountInitializedEventResponse typedResponse = new DAuthAccountInitializedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.entryPoint = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DAuthAccountInitializedEventResponse> dAuthAccountInitializedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DAuthAccountInitializedEventResponse>() {
            @Override
            public DAuthAccountInitializedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DAUTHACCOUNTINITIALIZED_EVENT, log);
                DAuthAccountInitializedEventResponse typedResponse = new DAuthAccountInitializedEventResponse();
                typedResponse.log = log;
                typedResponse.entryPoint = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.owner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DAuthAccountInitializedEventResponse> dAuthAccountInitializedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DAUTHACCOUNTINITIALIZED_EVENT));
        return dAuthAccountInitializedEventFlowable(filter);
    }

    public static List<InitializedEventResponse> getInitializedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INITIALIZED_EVENT, transactionReceipt);
        ArrayList<InitializedEventResponse> responses = new ArrayList<InitializedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InitializedEventResponse typedResponse = new InitializedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, InitializedEventResponse>() {
            @Override
            public InitializedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(INITIALIZED_EVENT, log);
                InitializedEventResponse typedResponse = new InitializedEventResponse();
                typedResponse.log = log;
                typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INITIALIZED_EVENT));
        return initializedEventFlowable(filter);
    }

    public static List<UpgradedEventResponse> getUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UPGRADED_EVENT, transactionReceipt);
        ArrayList<UpgradedEventResponse> responses = new ArrayList<UpgradedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpgradedEventResponse typedResponse = new UpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UpgradedEventResponse>() {
            @Override
            public UpgradedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UPGRADED_EVENT, log);
                UpgradedEventResponse typedResponse = new UpgradedEventResponse();
                typedResponse.log = log;
                typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPGRADED_EVENT));
        return upgradedEventFlowable(filter);
    }

    public RemoteFunctionCall<String> entryPoint() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ENTRYPOINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> execute(String dest, BigInteger value, byte[] func) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_EXECUTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(dest), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.DynamicBytes(func)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> executeBatch(List<String> dest, List<byte[]> func) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_EXECUTEBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(dest, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(func, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getNonce() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETNONCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(String anOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(anOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> onERC1155BatchReceived(String param0, String param1, List<BigInteger> param2, List<BigInteger> param3, byte[] param4) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ONERC1155BATCHRECEIVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0), 
                new org.web3j.abi.datatypes.Address(param1), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(param2, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(param3, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicBytes(param4)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes4>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> onERC1155Received(String param0, String param1, BigInteger param2, BigInteger param3, byte[] param4) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ONERC1155RECEIVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0), 
                new org.web3j.abi.datatypes.Address(param1), 
                new org.web3j.abi.datatypes.generated.Uint256(param2), 
                new org.web3j.abi.datatypes.generated.Uint256(param3), 
                new org.web3j.abi.datatypes.DynamicBytes(param4)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes4>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> onERC721Received(String param0, String param1, BigInteger param2, byte[] param3) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ONERC721RECEIVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0), 
                new org.web3j.abi.datatypes.Address(param1), 
                new org.web3j.abi.datatypes.generated.Uint256(param2), 
                new org.web3j.abi.datatypes.DynamicBytes(param3)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes4>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> proxiableUUID() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PROXIABLEUUID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeTo(String newImplementation) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPGRADETO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newImplementation)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeToAndCall(String newImplementation, byte[] data, BigInteger weiValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPGRADETOANDCALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newImplementation), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> validateUserOp(UserOperation userOp, byte[] userOpHash, BigInteger missingAccountFunds) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_VALIDATEUSEROP, 
                Arrays.<Type>asList(userOp, 
                new org.web3j.abi.datatypes.generated.Bytes32(userOpHash), 
                new org.web3j.abi.datatypes.generated.Uint256(missingAccountFunds)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static DAuthAccount load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DAuthAccount(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DAuthAccount load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DAuthAccount(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DAuthAccount load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DAuthAccount(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DAuthAccount load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DAuthAccount(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DAuthAccount> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String anEntryPoint) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(anEntryPoint)));
        return deployRemoteCall(DAuthAccount.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<DAuthAccount> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String anEntryPoint) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(anEntryPoint)));
        return deployRemoteCall(DAuthAccount.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<DAuthAccount> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String anEntryPoint) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(anEntryPoint)));
        return deployRemoteCall(DAuthAccount.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<DAuthAccount> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String anEntryPoint) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(anEntryPoint)));
        return deployRemoteCall(DAuthAccount.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class UserOperation extends DynamicStruct {
        public String sender;

        public BigInteger nonce;

        public byte[] initCode;

        public byte[] callData;

        public BigInteger callGasLimit;

        public BigInteger verificationGasLimit;

        public BigInteger preVerificationGas;

        public BigInteger maxFeePerGas;

        public BigInteger maxPriorityFeePerGas;

        public byte[] paymasterAndData;

        public byte[] signature;

        public UserOperation(String sender, BigInteger nonce, byte[] initCode, byte[] callData, BigInteger callGasLimit, BigInteger verificationGasLimit, BigInteger preVerificationGas, BigInteger maxFeePerGas, BigInteger maxPriorityFeePerGas, byte[] paymasterAndData, byte[] signature) {
            super(new org.web3j.abi.datatypes.Address(sender), 
                    new org.web3j.abi.datatypes.generated.Uint256(nonce), 
                    new org.web3j.abi.datatypes.DynamicBytes(initCode), 
                    new org.web3j.abi.datatypes.DynamicBytes(callData), 
                    new org.web3j.abi.datatypes.generated.Uint256(callGasLimit), 
                    new org.web3j.abi.datatypes.generated.Uint256(verificationGasLimit), 
                    new org.web3j.abi.datatypes.generated.Uint256(preVerificationGas), 
                    new org.web3j.abi.datatypes.generated.Uint256(maxFeePerGas), 
                    new org.web3j.abi.datatypes.generated.Uint256(maxPriorityFeePerGas), 
                    new org.web3j.abi.datatypes.DynamicBytes(paymasterAndData), 
                    new org.web3j.abi.datatypes.DynamicBytes(signature));
            this.sender = sender;
            this.nonce = nonce;
            this.initCode = initCode;
            this.callData = callData;
            this.callGasLimit = callGasLimit;
            this.verificationGasLimit = verificationGasLimit;
            this.preVerificationGas = preVerificationGas;
            this.maxFeePerGas = maxFeePerGas;
            this.maxPriorityFeePerGas = maxPriorityFeePerGas;
            this.paymasterAndData = paymasterAndData;
            this.signature = signature;
        }

        public UserOperation(Address sender, Uint256 nonce, DynamicBytes initCode, DynamicBytes callData, Uint256 callGasLimit, Uint256 verificationGasLimit, Uint256 preVerificationGas, Uint256 maxFeePerGas, Uint256 maxPriorityFeePerGas, DynamicBytes paymasterAndData, DynamicBytes signature) {
            super(sender, nonce, initCode, callData, callGasLimit, verificationGasLimit, preVerificationGas, maxFeePerGas, maxPriorityFeePerGas, paymasterAndData, signature);
            this.sender = sender.getValue();
            this.nonce = nonce.getValue();
            this.initCode = initCode.getValue();
            this.callData = callData.getValue();
            this.callGasLimit = callGasLimit.getValue();
            this.verificationGasLimit = verificationGasLimit.getValue();
            this.preVerificationGas = preVerificationGas.getValue();
            this.maxFeePerGas = maxFeePerGas.getValue();
            this.maxPriorityFeePerGas = maxPriorityFeePerGas.getValue();
            this.paymasterAndData = paymasterAndData.getValue();
            this.signature = signature.getValue();
        }
    }

    public static class AdminChangedEventResponse extends BaseEventResponse {
        public String previousAdmin;

        public String newAdmin;
    }

    public static class BeaconUpgradedEventResponse extends BaseEventResponse {
        public String beacon;
    }

    public static class DAuthAccountInitializedEventResponse extends BaseEventResponse {
        public String entryPoint;

        public String owner;
    }

    public static class InitializedEventResponse extends BaseEventResponse {
        public BigInteger version;
    }

    public static class UpgradedEventResponse extends BaseEventResponse {
        public String implementation;
    }
}
