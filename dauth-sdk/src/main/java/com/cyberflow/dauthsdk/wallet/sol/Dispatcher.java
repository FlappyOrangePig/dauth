package com.cyberflow.dauthsdk.wallet.sol;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.abi.datatypes.reflection.Parameterized;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.0.
 */
@SuppressWarnings("rawtypes")
public class Dispatcher extends Contract {
    public static final String BINARY = "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051613efd620001206000396000818161050701528181610550015281816112b2015281816112f201526113850152613efd6000f3fe6080604052600436106101665760003560e01c80635904b207116100d15780638456cb591161008a57806395796eab1161006457806395796eab146103f05780639d18b06b14610426578063ab857ee014610439578063f2fde38b1461044c57600080fd5b80638456cb591461039d5780638705fcd4146103b25780638da5cb5b146103d257600080fd5b80635904b207146102fb5780635b7633d01461031b5780635c975abb1461033b578063715018a6146103535780637efbb0e0146103685780638129fc1c1461038857600080fd5b8063436d47cb11610123578063436d47cb14610232578063437fbb241461025257806344a38111146102725780634b9524a1146102b25780634f1ef286146102c557806352d1902d146102d857600080fd5b8063046dc1661461016b5780631a3ee34d1461018d5780633659cfe6146101ad57806336ef45a5146101cd5780633f4ba83a146101e057806341275358146101f5575b600080fd5b34801561017757600080fd5b5061018b610186366004612cbe565b61046c565b005b34801561019957600080fd5b5061018b6101a8366004612cea565b610496565b3480156101b957600080fd5b5061018b6101c8366004612cbe565b6104fc565b61018b6101db366004612d39565b6105e5565b3480156101ec57600080fd5b5061018b61098b565b34801561020157600080fd5b5060fc54610215906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561023e57600080fd5b5061018b61024d366004612d87565b61099d565b34801561025e57600080fd5b5061018b61026d366004612dcd565b610ac8565b34801561027e57600080fd5b506102a261028d366004612e01565b60fd6020526000908152604090205460ff1681565b6040519015158152602001610229565b61018b6102c0366004612d87565b610c8f565b61018b6102d3366004612ef7565b6112a7565b3480156102e457600080fd5b506102ed611378565b604051908152602001610229565b34801561030757600080fd5b5061018b610316366004612d87565b61142b565b34801561032757600080fd5b5060fb54610215906001600160a01b031681565b34801561034757600080fd5b5060335460ff166102a2565b34801561035f57600080fd5b5061018b611500565b34801561037457600080fd5b5061018b610383366004612d39565b611512565b34801561039457600080fd5b5061018b611713565b3480156103a957600080fd5b5061018b611845565b3480156103be57600080fd5b5061018b6103cd366004612cbe565b611855565b3480156103de57600080fd5b506065546001600160a01b0316610215565b3480156103fc57600080fd5b5061021561040b366004612f46565b60fe602052600090815260409020546001600160a01b031681565b61018b610434366004612f61565b61187f565b61018b610447366004612dcd565b611afc565b34801561045857600080fd5b5061018b610467366004612cbe565b611f0e565b610474611f84565b60fb80546001600160a01b0319166001600160a01b0392909216919091179055565b61049e611f84565b8060fe60008460038111156104b5576104b5612f9b565b60038111156104c6576104c6612f9b565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561054e5760405162461bcd60e51b815260040161054590612fb1565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610597600080516020613e81833981519152546001600160a01b031690565b6001600160a01b0316146105bd5760405162461bcd60e51b815260040161054590612ffd565b6105c681611fde565b604080516000808252602082019092526105e291839190611fe6565b50565b6105ed612156565b60006105f9600261219c565b905061074e7f063ac7b30b5c3d4183a8866e09491885f90785a83610a221b77354a88a0a462c3361062d6040860186613049565b61063b906020810190612cbe565b6106486020870187612cbe565b6106556040880188613049565b602090810135908801356106ca61066f60408b018b613049565b61067d906060810190613069565b610687908061307f565b61069460408d018d613049565b6106a29060408101906130c5565b602001356106b360408e018e613049565b6106c19060408101906130c5565b6040013561222d565b6040805160208101989098526001600160a01b0396871690880152938516606087015293909116608085015260a084015260c083019190915260e082015261010001604051602081830303815290604052805190602001208380604001906107329190613049565b6107409060408101906130c5565b610749906130db565b612266565b600061075d6040840184613049565b61076b906020810190612cbe565b6001600160a01b031614610832576107866040830183613049565b610794906020810190612cbe565b6001600160a01b03166323b872dd33836107b16040870187613049565b602001356040518463ffffffff1660e01b81526004016107d393929190613152565b6020604051808303816000875af11580156107f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108169190613176565b6108325760405162461bcd60e51b815260040161054590613198565b806001600160a01b0316637d6c24c5346040518060e0016040528086806040019061085d9190613049565b61086b906020810190612cbe565b6001600160a01b03168152602001336001600160a01b0316815260200186600001602081019061089b9190612cbe565b6001600160a01b03908116825260fc541660208201526040908101906108c390880188613049565b602001358152602001866020013581526020018680604001906108e69190613049565b6108f4906060810190613069565b6108fe908061307f565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152506040516001600160e01b031960e085901b168152610955919060040161321c565b6000604051808303818588803b15801561096e57600080fd5b505af1158015610982573d6000803e3d6000fd5b50505050505050565b610993611f84565b61099b6123ce565b565b6109a5612156565b610a577fc616b313082ec368ed66db2d75b1a87c1aae01eb9733e2876134a56eb5f48be2336109d7602085018561307f565b6109e4604087018761307f565b610a1c6109f460808a018a613069565b6109fe908061307f565b610a0b60608c018c6130c5565b602001356106c160608d018d6130c5565b604051602001610a3297969594939291906132ad565b60408051601f19818403018152919052805160209091012061074060608401846130c5565b6000610a63600061219c565b60405163436d47cb60e01b81529091506001600160a01b0382169063436d47cb90610a929085906004016133b9565b600060405180830381600087803b158015610aac57600080fd5b505af1158015610ac0573d6000803e3d6000fd5b505050505050565b610ad0612156565b6000610adc600361219c565b9050610bb17f5f99170ca6653825f97f7ca565d607f45a84595747c9291f8c38cee4997fb3cd338435610b12604087018761348f565b60209081013590870135610b54610b2c60a08a018a613069565b610b36908061307f565b610b4360808c018c6130c5565b602001356106c160808d018d6130c5565b6040805160208101979097526001600160a01b03909516948601949094526060850192909252608084015260a083015260c082015260e00160408051601f19818403018152919052805160209091012061074060808501856130c5565b806001600160a01b0316630b89faa86040518060c001604052808560000135815260200185602001358152602001858060400190610bef919061348f565b610bf89061353d565b8152336020820152604001610c136080870160608801612cbe565b6001600160a01b03168152602001610c2e60a0870187613069565b610c38908061307f565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152506040516001600160e01b031960e084901b168152610a92919060040161358e565b610c97612156565b6000610ca3600361219c565b90506000610cbc610cb76020850185613600565b612420565b9050610d2f7f9f41103c364cb74e33bad641e1531b0d0c466fb1530815f6319b5da1ddc5e05833853584610cf66109f460808a018a613069565b604051602001610d0a959493929190613649565b60408051601f19818403018152919052805160209091012061074060608601866130c5565b6000805b610d406020860186613600565b905081101561111f576000610dc5610d5b6020880188613600565b84818110610d6b57610d6b6136b6565b9050602002810190610d7d919061348f565b610d8b90608081019061307f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506125b392505050565b90506000610dd66020880188613600565b84818110610de657610de66136b6565b9050602002810190610df8919061348f565b60400135610e096020890189613600565b85818110610e1957610e196136b6565b9050602002810190610e2b919061348f565b610e369190356136e2565b90507f4e8e254edb01426b6143b7bc645e83d15690c4c05223fa236535e12cb103e884821415610e7157610e6a8185613701565b935061110a565b7f8ae85d849167ff996c04040c44924fd364217285e4cad818292c7ac37c0a345b821415610f6c57610ea66020880188613600565b84818110610eb657610eb66136b6565b9050602002810190610ec8919061348f565b610ed9906080810190606001612cbe565b6001600160a01b03166323b872dd3388846040518463ffffffff1660e01b8152600401610f0893929190613152565b6020604051808303816000875af1158015610f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4b9190613176565b610f675760405162461bcd60e51b815260040161054590613198565b61110a565b7f73ad2146b3d3a286642c794379d750360a2d53a3459a11b3e5d6cc900f55f44a8214156110a2576000610fa36020890189613600565b85818110610fb357610fb36136b6565b9050602002810190610fc5919061348f565b610fd6906080810190606001612cbe565b6040516370a0823160e01b81523360048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa15801561101c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110409190613719565b90508181101561109c5760405162461bcd60e51b815260206004820152602160248201527f616c6c426f6e7573206e6f7420657175616c20746f206e66742062616c616e636044820152606560f81b6064820152608401610545565b5061110a565b7fda75ff43b8ef8127ad177eba5034deb3f3fbfff3627144838000445f6c48f1198214156110cf5761110a565b60405162461bcd60e51b815260206004820152601060248201526f77726f6e6720626f6e7573207479706560801b6044820152606401610545565b5050808061111790613732565b915050610d33565b5034811461116f5760405162461bcd60e51b815260206004820152601f60248201527f616c6c426f6e7573206e6f7420657175616c20746f206d73672e76616c7565006044820152606401610545565b826001600160a01b031663ccf425af346040518060a00160405280886000013581526020018880602001906111a49190613600565b6111ad9161374d565b81523360208201526040908101906111c7908a018a61307f565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060200161120e60808a018a613069565b611218908061307f565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152506040516001600160e01b031960e085901b16815261126f91906004016137d0565b6000604051808303818588803b15801561128857600080fd5b505af115801561129c573d6000803e3d6000fd5b505050505050505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156112f05760405162461bcd60e51b815260040161054590612fb1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611339600080516020613e81833981519152546001600160a01b031690565b6001600160a01b03161461135f5760405162461bcd60e51b815260040161054590612ffd565b61136882611fde565b61137482826001611fe6565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146114185760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610545565b50600080516020613e8183398151915290565b611433612156565b6114c37fe29560ede40c302bf0d9ae8cf757bb90e2aac211c7978afb7618e0cab0108d3c338335611467602086018661307f565b611474604088018861307f565b6114ac61148460808b018b613069565b61148e908061307f565b61149b60608d018d6130c5565b602001356106c160608e018e6130c5565b604051602001610a3298979695949392919061388f565b60006114cf600061219c565b604051635983399d60e01b81529091506001600160a01b03821690635983399d90610a9290339086906004016138e6565b611508611f84565b61099b60006125e3565b61151a612156565b6116187fe957ea144934bf0f3be7d4c66fd479f4d4bde6cb6ee00e07b45e8c1306d69d0b3361154984806139b6565b6115579060c081019061307f565b61156186806139b6565b6115729060c081019060a001612cbe565b61157c87806139b6565b6080013561158a88806139b6565b6060013561159889806139b6565b604001356115da8a80604001906115af9190613069565b6115b9908061307f565b6115c660208e018e6130c5565b602001358d80602001906106c191906130c5565b6040516020016115f2999897969594939291906139cc565b6040516020818303038152906040528051906020012082806020019061074091906130c5565b6000611624600161219c565b90506000611632600061219c565b9050816001600160a01b031663502932df6040518060a0016040528086806000019061165e91906139b6565b61166790613a25565b81526020016116796040880188613069565b61168290613ae5565b81526001600160a01b03808616602083015260fc541660408083019190915233606090920191909152516001600160e01b031960e084901b1681526116ca9190600401613b5a565b6020604051808303816000875af11580156116e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170d9190613c61565b50505050565b600054610100900460ff16158080156117335750600054600160ff909116105b8061174d5750303b15801561174d575060005460ff166001145b6117b05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610545565b6000805460ff1916600117905580156117d3576000805461ff0019166101001790555b6117db612635565b6117e3612664565b6117eb612693565b60fb80546001600160a01b0319163317905580156105e2576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b61184d611f84565b61099b6126ba565b61185d611f84565b60fc80546001600160a01b0319166001600160a01b0392909216919091179055565b611887612156565b6000611893600261219c565b90506119717f063ac7b30b5c3d4183a8866e09491885f90785a83610a221b77354a88a0a462c336118c76020860186612cbe565b60006020870135816119076118df60608b018b613069565b6118e9908061307f565b6118f660408d018d6130c5565b602001356106c160408e018e6130c5565b6040805160208101989098526001600160a01b0396871690880152938516606087015293909116608085015260a084015260ff90911660c083015260e0820152610100016040516020818303038152906040528051906020012083806040019061074091906130c5565b60006119806020840184612cbe565b6001600160a01b031614611a2d5761199b6020830183612cbe565b6001600160a01b03166323b872dd338385602001356040518463ffffffff1660e01b81526004016119ce93929190613152565b6020604051808303816000875af11580156119ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a119190613176565b611a2d5760405162461bcd60e51b815260040161054590613198565b806001600160a01b031663f2b247a9346040518060a00160405280866000016020810190611a5b9190612cbe565b6001600160a01b0390811682523360208084019190915260fc549091166040830152870135606080830191909152608090910190611a9b90880188613069565b611aa5908061307f565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152506040516001600160e01b031960e085901b1681526109559190600401613c7e565b611b04612156565b611bc77f6155d0a62ab8b11fa7dacfeb2318cd333d4cb896eff4a0878af0095944e3c9c833611b396040850160208601612cbe565b611b46604086018661307f565b611b53606088018861307f565b611b8b611b6360a08b018b613069565b611b6d908061307f565b611b7a60808d018d6130c5565b602001356106c160808e018e6130c5565b604051602001611ba2989796959493929190613ccf565b60408051601f19818403018152919052805160209091012061074060808401846130c5565b6000611bd3600061219c565b9050600080611be86040850160208601612cbe565b6001600160a01b0316630302bfba6040518163ffffffff1660e01b81526004016040805180830381865afa158015611c24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c489190613d02565b90925090506001600160a01b03821615611cfa576001600160a01b0382166323b872dd33611c7c6040880160208901612cbe565b846040518463ffffffff1660e01b8152600401611c9b93929190613152565b6020604051808303816000875af1158015611cba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cde9190613176565b611cfa5760405162461bcd60e51b815260040161054590613198565b60006001600160a01b038416636d5963dc611d18604088018861307f565b6040518363ffffffff1660e01b8152600401611d35929190613d30565b602060405180830381865afa158015611d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d769190613c61565b90506001600160a01b038116611dbd5760405162461bcd60e51b815260206004820152600c60248201526b3430b73236329032b93937b960a11b6044820152606401610545565b611dcd6040860160208701612cbe565b6001600160a01b031663b5a2dfbd346040518060a00160405280336001600160a01b03168152602001896000016020810190611e099190612cbe565b6001600160a01b03908116825286166020820152604001611e2d60608b018b61307f565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602001611e7460a08b018b613069565b611e7e908061307f565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152506040516001600160e01b031960e085901b168152611ed59190600401613d44565b6000604051808303818588803b158015611eee57600080fd5b505af1158015611f02573d6000803e3d6000fd5b50505050505050505050565b611f16611f84565b6001600160a01b038116611f7b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610545565b6105e2816125e3565b6065546001600160a01b0316331461099b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610545565b6105e2611f84565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561201e57612019836126f7565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612078575060408051601f3d908101601f1916820190925261207591810190613719565b60015b6120db5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610545565b600080516020613e81833981519152811461214a5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610545565b50612019838383612793565b60335460ff161561099b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610545565b60008060fe60008460038111156121b5576121b5612f9b565b60038111156121c6576121c6612f9b565b81526020810191909152604001600020546001600160a01b03169050806122275760405162461bcd60e51b81526020600482015260156024820152741b5bd91d5b1948191bd95cc81b9bdd08195e1a5cdd605a1b6044820152606401610545565b92915050565b6000848484846040516020016122469493929190613da9565b604051602081830303815290604052805190602001209050949350505050565b602080820151600090815260fd909152604090205460ff16156122ba5760405162461bcd60e51b815260206004820152600c60248201526b1b9bdb98d9481c995c19585d60a21b6044820152606401610545565b428160400151116123015760405162461bcd60e51b815260206004820152601160248201527065787069726564207369676e617475726560781b6044820152606401610545565b602080820151600090815260fd90915260408120805460ff1916600117905581516123359061232f856127b8565b906127f3565b90506001600160a01b03811661237f5760405162461bcd60e51b815260206004820152600f60248201526e77726f6e67207369676e617475726560881b6044820152606401610545565b60fb546001600160a01b038281169116146120195760405162461bcd60e51b815260206004820152600f60248201526e77726f6e67207369676e617475726560881b6044820152606401610545565b6123d6612817565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6060816000816001600160401b0381111561243d5761243d612e1a565b604051908082528060200260200182016040528015612466578160200160208202803683370190505b50905060005b828110156125aa57858582818110612486576124866136b6565b9050602002810190612498919061348f565b358686838181106124ab576124ab6136b6565b90506020028101906124bd919061348f565b602001358787848181106124d3576124d36136b6565b90506020028101906124e5919061348f565b604001358888858181106124fb576124fb6136b6565b905060200281019061250d919061348f565b61251e906080810190606001612cbe565b898986818110612530576125306136b6565b9050602002810190612542919061348f565b61255090608081019061307f565b60405160200161256596959493929190613dd0565b6040516020818303038152906040528051906020012082828151811061258d5761258d6136b6565b6020908102919091010152806125a281613732565b91505061246c565b50949350505050565b6000816040516020016125c69190613e10565b604051602081830303815290604052805190602001209050919050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1661265c5760405162461bcd60e51b815260040161054590613e22565b61099b612860565b600054610100900460ff1661268b5760405162461bcd60e51b815260040161054590613e22565b61099b612893565b600054610100900460ff1661099b5760405162461bcd60e51b815260040161054590613e22565b6126c2612156565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586124033390565b6001600160a01b0381163b6127645760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610545565b600080516020613e8183398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61279c836128c3565b6000825111806127a95750805b156120195761170d8383612903565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c016125c6565b600080600061280285856129f7565b9150915061280f81612a3d565b509392505050565b60335460ff1661099b5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610545565b600054610100900460ff166128875760405162461bcd60e51b815260040161054590613e22565b6033805460ff19169055565b600054610100900460ff166128ba5760405162461bcd60e51b815260040161054590613e22565b61099b336125e3565b6128cc816126f7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b61296b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610545565b600080846001600160a01b0316846040516129869190613e10565b600060405180830381855af49150503d80600081146129c1576040519150601f19603f3d011682016040523d82523d6000602084013e6129c6565b606091505b50915091506129ee8282604051806060016040528060278152602001613ea160279139612b8b565b95945050505050565b600080825160411415612a2e5760208301516040840151606085015160001a612a2287828585612bab565b94509450505050612a36565b506000905060025b9250929050565b6000816004811115612a5157612a51612f9b565b1415612a5a5750565b6001816004811115612a6e57612a6e612f9b565b1415612abc5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610545565b6002816004811115612ad057612ad0612f9b565b1415612b1e5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610545565b6003816004811115612b3257612b32612f9b565b14156105e25760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610545565b60608315612b9a575081612ba4565b612ba48383612c6f565b9392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612be25750600090506003612c66565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612c36573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612c5f57600060019250925050612c66565b9150600090505b94509492505050565b815115612c7f5781518083602001fd5b8060405162461bcd60e51b81526004016105459190613e6d565b6001600160a01b03811681146105e257600080fd5b8035612cb981612c99565b919050565b600060208284031215612cd057600080fd5b8135612ba481612c99565b803560048110612cb957600080fd5b60008060408385031215612cfd57600080fd5b612d0683612cdb565b91506020830135612d1681612c99565b809150509250929050565b600060608284031215612d3357600080fd5b50919050565b600060208284031215612d4b57600080fd5b81356001600160401b03811115612d6157600080fd5b612d6d84828501612d21565b949350505050565b600060a08284031215612d3357600080fd5b600060208284031215612d9957600080fd5b81356001600160401b03811115612daf57600080fd5b612d6d84828501612d75565b600060c08284031215612d3357600080fd5b600060208284031215612ddf57600080fd5b81356001600160401b03811115612df557600080fd5b612d6d84828501612dbb565b600060208284031215612e1357600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b0381118282101715612e5257612e52612e1a565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612e8057612e80612e1a565b604052919050565b600082601f830112612e9957600080fd5b81356001600160401b03811115612eb257612eb2612e1a565b612ec5601f8201601f1916602001612e58565b818152846020838601011115612eda57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215612f0a57600080fd5b8235612f1581612c99565b915060208301356001600160401b03811115612f3057600080fd5b612f3c85828601612e88565b9150509250929050565b600060208284031215612f5857600080fd5b612ba482612cdb565b600060208284031215612f7357600080fd5b81356001600160401b03811115612f8957600080fd5b820160808185031215612ba457600080fd5b634e487b7160e01b600052602160045260246000fd5b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60008235607e1983360301811261305f57600080fd5b9190910192915050565b60008235601e1983360301811261305f57600080fd5b6000808335601e1984360301811261309657600080fd5b8301803591506001600160401b038211156130b057600080fd5b602001915036819003821315612a3657600080fd5b60008235605e1983360301811261305f57600080fd5b6000606082360312156130ed57600080fd5b604051606081016001600160401b03828210818311171561311057613110612e1a565b81604052843591508082111561312557600080fd5b5061313236828601612e88565b825250602083013560208201526040830135604082015280915050919050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561318857600080fd5b81518015158114612ba457600080fd5b6020808252601290820152713a3930b739b332b9233937b69032b93937b960711b604082015260600190565b60005b838110156131df5781810151838201526020016131c7565b8381111561170d5750506000910152565b600081518084526132088160208601602086016131c4565b601f01601f19169290920160200192915050565b60208152600060018060a01b0380845116602084015280602085015116604084015280604085015116606084015280606085015116608084015250608083015160a083015260a083015160c083015260c083015160e080840152612d6d6101008401826131f0565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8781526001600160a01b038716602082015260a0604082018190526000906132d89083018789613284565b82810360608401526132eb818688613284565b91505082608083015298975050505050505050565b6000808335601e1984360301811261331757600080fd5b83016020810192503590506001600160401b0381111561333657600080fd5b803603831315612a3657600080fd5b60008235605e1983360301811261335b57600080fd5b90910192915050565b60006133708283613300565b60608552613382606086018284613284565b91505060208301356020850152604083013560408501528091505092915050565b60008235601e1983360301811261335b57600080fd5b60208152600082356133ca81612c99565b6001600160a01b03166020838101919091526133e890840184613300565b60a060408501526133fd60c085018284613284565b91505061340d6040850185613300565b601f1980868503016060870152613425848385613284565b93506134346060880188613345565b92508086850301608087015261344a8484613364565b935061345960808801886133a3565b9250808685030160a087015250506134718182613300565b915060208352613485602084018383613284565b9695505050505050565b60008235609e1983360301811261305f57600080fd5b600060a082840312156134b757600080fd5b60405160a081016001600160401b0382821081831117156134da576134da612e1a565b816040528293508435835260208501356020840152604085013560408401526060850135915061350982612c99565b816060840152608085013591508082111561352357600080fd5b5061353085828601612e88565b6080830152505092915050565b600061222736836134a5565b80518252602081015160208301526040810151604083015260018060a01b0360608201511660608301526000608082015160a06080850152612d6d60a08501826131f0565b6020815281516020820152602082015160408201526000604083015160c060608401526135be60e0840182613549565b60608501516001600160a01b039081166080868101919091528601511660a085810191909152850151848203601f190160c08601529091506129ee82826131f0565b6000808335601e1984360301811261361757600080fd5b8301803591506001600160401b0382111561363157600080fd5b6020019150600581901b3603821315612a3657600080fd5b600060a08201878352602060018060a01b0388168185015286604085015260a0606085015281865180845260c086019150828801935060005b8181101561369e57845183529383019391830191600101613682565b50508093505050508260808301529695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156136fc576136fc6136cc565b500290565b60008219821115613714576137146136cc565b500190565b60006020828403121561372b57600080fd5b5051919050565b6000600019821415613746576137466136cc565b5060010190565b60006001600160401b038084111561376757613767612e1a565b8360051b6020613778818301612e58565b86815291850191818101903684111561379057600080fd5b865b848110156137c4578035868111156137aa5760008081fd5b6137b636828b016134a5565b845250918301918301613792565b50979650505050505050565b6000602080835260c083018451828501528185015160a0604086015281815180845260e08701915060e08160051b8801019350848301925060005b818110156138395760df19888603018352613827858551613549565b9450928501929185019160010161380b565b5050505060408501516001600160a01b0381166060860152915060608501519150601f198085830301608086015261387182846131f0565b925060808601519150808584030160a0860152506129ee82826131f0565b88815260018060a01b038816602082015286604082015260c0606082015260006138bd60c083018789613284565b82810360808401526138d0818688613284565b9150508260a08301529998505050505050505050565b60018060a01b03831681526040602082015281356040820152600061390e6020840184613300565b60a0606085015261392360e085018284613284565b9150506139336040850185613300565b603f198086850301608087015261394b848385613284565b935061395a6060880188613345565b9250808685030160a08701526139708484613364565b935061397f60808801886133a3565b9250808685030160c087015250506139978182613300565b9150602083526139ab602084018383613284565b979650505050505050565b6000823560de1983360301811261305f57600080fd5b8981526001600160a01b038981166020830152610100604083018190526000916139f98483018b8d613284565b981660608401525050608081019490945260a084019290925260c083015260e090910152949350505050565b600060e08236031215613a3757600080fd5b613a3f612e30565b82356001600160401b0380821115613a5657600080fd5b613a6236838701612e88565b83526020850135915080821115613a7857600080fd5b613a8436838701612e88565b6020840152604085013560408401526060850135606084015260808501356080840152613ab360a08601612cae565b60a084015260c0850135915080821115613acc57600080fd5b50613ad936828601612e88565b60c08301525092915050565b600060208236031215613af757600080fd5b604051602081016001600160401b038282108183111715613b1a57613b1a612e1a565b816040528435915080821115613b2f57600080fd5b50613b3c36828601612e88565b82525092915050565b6000815160208452612d6d60208501826131f0565b602081526000825160a06020840152805160e060c0850152613b806101a08501826131f0565b9050602082015160bf19808684030160e0870152613b9e83836131f0565b60408501516101008801526060850151610120880152608085015161014088015260a08501516001600160a01b031661016088015260c090940151868503909101610180870152929150613bf4905081836131f0565b9150506020840151601f19848303016040850152613c128282613b45565b9150506040840151613c2f60608501826001600160a01b03169052565b5060608401516001600160a01b03811660808501525060808401516001600160a01b03811660a0850152509392505050565b600060208284031215613c7357600080fd5b8151612ba481612c99565b60208152600060018060a01b038084511660208401528060208501511660408401528060408501511660608401525060608301516080830152608083015160a080840152612d6d60c08401826131f0565b8881526001600160a01b0388811660208301528716604082015260c0606082018190526000906138bd9083018789613284565b60008060408385031215613d1557600080fd5b8251613d2081612c99565b6020939093015192949293505050565b602081526000612d6d602083018486613284565b60208152600060018060a01b0380845116602084015280602085015116604084015280604085015116606084015250606083015160a06080840152613d8c60c08401826131f0565b90506080840151601f198483030160a08501526129ee82826131f0565b606081526000613dbd606083018688613284565b6020830194909452506040015292915050565b86815285602082015284604082015260018060a01b038416606082015260a060808201526000613e0460a083018486613284565b98975050505050505050565b6000825161305f8184602087016131c4565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b602081526000612ba460208301846131f056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212207af4076bb1fa12079564e900ac28e509f18f835a71048b671dc3caadcdf5eadd64736f6c634300080a0033";

    public static final String FUNC__MODULES = "_modules";

    public static final String FUNC_BUY = "buy";

    public static final String FUNC_CLAIM = "claim";

    public static final String FUNC_CODENONCES = "codeNonces";

    public static final String FUNC_CONSUME = "consume";

    public static final String FUNC_CREATECHANNELPROFILE = "createChannelProfile";

    public static final String FUNC_DEPLOYTICKET = "deployTicket";

    public static final String FUNC_DRAW = "draw";

    public static final String FUNC_FEEADDRESS = "feeAddress";

    public static final String FUNC_HANDLEREPLACE = "handleReplace";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_MINTTICKET = "mintTicket";

    public static final String FUNC_MODIFYMODULE = "modifyModule";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_PROXIABLEUUID = "proxiableUUID";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SETFEEADDRESS = "setFeeAddress";

    public static final String FUNC_SETSIGNERADDRESS = "setSignerAddress";

    public static final String FUNC_SIGNERADDRESS = "signerAddress";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final String FUNC_UPGRADETO = "upgradeTo";

    public static final String FUNC_UPGRADETOANDCALL = "upgradeToAndCall";

    public static final Event ADMINCHANGED_EVENT = new Event("AdminChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event BEACONUPGRADED_EVENT = new Event("BeaconUpgraded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event INITIALIZED_EVENT = new Event("Initialized", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PAUSED_EVENT = new Event("Paused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event UNPAUSED_EVENT = new Event("Unpaused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event UPGRADED_EVENT = new Event("Upgraded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected Dispatcher(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Dispatcher(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Dispatcher(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Dispatcher(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<AdminChangedEventResponse> getAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<AdminChangedEventResponse> responses = new ArrayList<AdminChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AdminChangedEventResponse typedResponse = new AdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousAdmin = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AdminChangedEventResponse getAdminChangedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ADMINCHANGED_EVENT, log);
        AdminChangedEventResponse typedResponse = new AdminChangedEventResponse();
        typedResponse.log = log;
        typedResponse.previousAdmin = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.newAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<AdminChangedEventResponse> adminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAdminChangedEventFromLog(log));
    }

    public Flowable<AdminChangedEventResponse> adminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADMINCHANGED_EVENT));
        return adminChangedEventFlowable(filter);
    }

    public static List<BeaconUpgradedEventResponse> getBeaconUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BEACONUPGRADED_EVENT, transactionReceipt);
        ArrayList<BeaconUpgradedEventResponse> responses = new ArrayList<BeaconUpgradedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BeaconUpgradedEventResponse typedResponse = new BeaconUpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beacon = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static BeaconUpgradedEventResponse getBeaconUpgradedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(BEACONUPGRADED_EVENT, log);
        BeaconUpgradedEventResponse typedResponse = new BeaconUpgradedEventResponse();
        typedResponse.log = log;
        typedResponse.beacon = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<BeaconUpgradedEventResponse> beaconUpgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getBeaconUpgradedEventFromLog(log));
    }

    public Flowable<BeaconUpgradedEventResponse> beaconUpgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BEACONUPGRADED_EVENT));
        return beaconUpgradedEventFlowable(filter);
    }

    public static List<InitializedEventResponse> getInitializedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INITIALIZED_EVENT, transactionReceipt);
        ArrayList<InitializedEventResponse> responses = new ArrayList<InitializedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InitializedEventResponse typedResponse = new InitializedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InitializedEventResponse getInitializedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INITIALIZED_EVENT, log);
        InitializedEventResponse typedResponse = new InitializedEventResponse();
        typedResponse.log = log;
        typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInitializedEventFromLog(log));
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INITIALIZED_EVENT));
        return initializedEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
        ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PausedEventResponse typedResponse = new PausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static PausedEventResponse getPausedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PAUSED_EVENT, log);
        PausedEventResponse typedResponse = new PausedEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getPausedEventFromLog(log));
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
        return pausedEventFlowable(filter);
    }

    public static List<UnpausedEventResponse> getUnpausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
        ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnpausedEventResponse typedResponse = new UnpausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UnpausedEventResponse getUnpausedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UNPAUSED_EVENT, log);
        UnpausedEventResponse typedResponse = new UnpausedEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUnpausedEventFromLog(log));
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
        return unpausedEventFlowable(filter);
    }

    public static List<UpgradedEventResponse> getUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UPGRADED_EVENT, transactionReceipt);
        ArrayList<UpgradedEventResponse> responses = new ArrayList<UpgradedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpgradedEventResponse typedResponse = new UpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UpgradedEventResponse getUpgradedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UPGRADED_EVENT, log);
        UpgradedEventResponse typedResponse = new UpgradedEventResponse();
        typedResponse.log = log;
        typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUpgradedEventFromLog(log));
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPGRADED_EVENT));
        return upgradedEventFlowable(filter);
    }

    public RemoteFunctionCall<String> _modules(BigInteger param0) {
        final Function function = new Function(FUNC__MODULES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> buy(BuyData vars, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_BUY, 
                Arrays.<Type>asList(vars), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> claim(ClaimData vars) {
        final Function function = new Function(
                FUNC_CLAIM, 
                Arrays.<Type>asList(vars), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> codeNonces(byte[] param0) {
        final Function function = new Function(FUNC_CODENONCES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> consume(ConsumeData vars, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_CONSUME, 
                Arrays.<Type>asList(vars), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> createChannelProfile(CreateProfileData vars) {
        final Function function = new Function(
                FUNC_CREATECHANNELPROFILE, 
                Arrays.<Type>asList(vars), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deployTicket(DeployTicketData vars) {
        final Function function = new Function(
                FUNC_DEPLOYTICKET, 
                Arrays.<Type>asList(vars), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> draw(DrawData vars, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_DRAW, 
                Arrays.<Type>asList(vars), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<String> feeAddress() {
        final Function function = new Function(FUNC_FEEADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> handleReplace(HandleReplaceData vars) {
        final Function function = new Function(
                FUNC_HANDLEREPLACE, 
                Arrays.<Type>asList(vars), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize() {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mintTicket(MintTicketData vars, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_MINTTICKET, 
                Arrays.<Type>asList(vars), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> modifyModule(BigInteger bizType, String newModuleAddress) {
        final Function function = new Function(
                FUNC_MODIFYMODULE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(bizType), 
                new org.web3j.abi.datatypes.Address(newModuleAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> pause() {
        final Function function = new Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> paused() {
        final Function function = new Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<byte[]> proxiableUUID() {
        final Function function = new Function(FUNC_PROXIABLEUUID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setFeeAddress(String _feeAddress) {
        final Function function = new Function(
                FUNC_SETFEEADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_feeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setSignerAddress(String _signerAddress) {
        final Function function = new Function(
                FUNC_SETSIGNERADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_signerAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> signerAddress() {
        final Function function = new Function(FUNC_SIGNERADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unpause() {
        final Function function = new Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeTo(String newImplementation) {
        final Function function = new Function(
                FUNC_UPGRADETO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newImplementation)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeToAndCall(String newImplementation, byte[] data, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_UPGRADETOANDCALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newImplementation), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    @Deprecated
    public static Dispatcher load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Dispatcher(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Dispatcher load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Dispatcher(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Dispatcher load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Dispatcher(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Dispatcher load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Dispatcher(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Dispatcher> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Dispatcher.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Dispatcher> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Dispatcher.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Dispatcher> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Dispatcher.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Dispatcher> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Dispatcher.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class LiveGrantCode extends DynamicStruct {
        public byte[] code;

        public byte[] nonce;

        public BigInteger deadline;

        public LiveGrantCode(byte[] code, byte[] nonce, BigInteger deadline) {
            super(new org.web3j.abi.datatypes.DynamicBytes(code), 
                    new org.web3j.abi.datatypes.generated.Bytes32(nonce), 
                    new org.web3j.abi.datatypes.generated.Uint256(deadline));
            this.code = code;
            this.nonce = nonce;
            this.deadline = deadline;
        }

        public LiveGrantCode(DynamicBytes code, Bytes32 nonce, Uint256 deadline) {
            super(code, nonce, deadline);
            this.code = code.getValue();
            this.nonce = nonce.getValue();
            this.deadline = deadline.getValue();
        }
    }

    public static class LiveAttachment extends DynamicStruct {
        public String tradeId;

        public LiveAttachment(String tradeId) {
            super(new org.web3j.abi.datatypes.Utf8String(tradeId));
            this.tradeId = tradeId;
        }

        public LiveAttachment(Utf8String tradeId) {
            super(tradeId);
            this.tradeId = tradeId.getValue();
        }
    }

    public static class Bonus extends DynamicStruct {
        public BigInteger bonus;

        public BigInteger bonusId;

        public BigInteger winnerAmount;

        public String bonusTokenAddress;

        public String bonusType;

        public Bonus(BigInteger bonus, BigInteger bonusId, BigInteger winnerAmount, String bonusTokenAddress, String bonusType) {
            super(new org.web3j.abi.datatypes.generated.Uint256(bonus), 
                    new org.web3j.abi.datatypes.generated.Uint256(bonusId), 
                    new org.web3j.abi.datatypes.generated.Uint256(winnerAmount), 
                    new org.web3j.abi.datatypes.Address(bonusTokenAddress), 
                    new org.web3j.abi.datatypes.Utf8String(bonusType));
            this.bonus = bonus;
            this.bonusId = bonusId;
            this.winnerAmount = winnerAmount;
            this.bonusTokenAddress = bonusTokenAddress;
            this.bonusType = bonusType;
        }

        public Bonus(Uint256 bonus, Uint256 bonusId, Uint256 winnerAmount, Address bonusTokenAddress, Utf8String bonusType) {
            super(bonus, bonusId, winnerAmount, bonusTokenAddress, bonusType);
            this.bonus = bonus.getValue();
            this.bonusId = bonusId.getValue();
            this.winnerAmount = winnerAmount.getValue();
            this.bonusTokenAddress = bonusTokenAddress.getValue();
            this.bonusType = bonusType.getValue();
        }
    }

    public static class TicketCommonData extends DynamicStruct {
        public String name;

        public String symbol;

        public BigInteger totalSupply;

        public BigInteger serviceFee;

        public BigInteger fixedPrice;

        public String tokenAddress;

        public String handle;

        public TicketCommonData(String name, String symbol, BigInteger totalSupply, BigInteger serviceFee, BigInteger fixedPrice, String tokenAddress, String handle) {
            super(new org.web3j.abi.datatypes.Utf8String(name), 
                    new org.web3j.abi.datatypes.Utf8String(symbol), 
                    new org.web3j.abi.datatypes.generated.Uint256(totalSupply), 
                    new org.web3j.abi.datatypes.generated.Uint256(serviceFee), 
                    new org.web3j.abi.datatypes.generated.Uint256(fixedPrice), 
                    new org.web3j.abi.datatypes.Address(tokenAddress), 
                    new org.web3j.abi.datatypes.Utf8String(handle));
            this.name = name;
            this.symbol = symbol;
            this.totalSupply = totalSupply;
            this.serviceFee = serviceFee;
            this.fixedPrice = fixedPrice;
            this.tokenAddress = tokenAddress;
            this.handle = handle;
        }

        public TicketCommonData(Utf8String name, Utf8String symbol, Uint256 totalSupply, Uint256 serviceFee, Uint256 fixedPrice, Address tokenAddress, Utf8String handle) {
            super(name, symbol, totalSupply, serviceFee, fixedPrice, tokenAddress, handle);
            this.name = name.getValue();
            this.symbol = symbol.getValue();
            this.totalSupply = totalSupply.getValue();
            this.serviceFee = serviceFee.getValue();
            this.fixedPrice = fixedPrice.getValue();
            this.tokenAddress = tokenAddress.getValue();
            this.handle = handle.getValue();
        }
    }

    public static class BuyData extends DynamicStruct {
        public String tokenAddress;

        public BigInteger amount;

        public LiveGrantCode grantCode;

        public LiveAttachment attachment;

        public BuyData(String tokenAddress, BigInteger amount, LiveGrantCode grantCode, LiveAttachment attachment) {
            super(new org.web3j.abi.datatypes.Address(tokenAddress), 
                    new org.web3j.abi.datatypes.generated.Uint256(amount), 
                    grantCode, 
                    attachment);
            this.tokenAddress = tokenAddress;
            this.amount = amount;
            this.grantCode = grantCode;
            this.attachment = attachment;
        }

        public BuyData(Address tokenAddress, Uint256 amount, LiveGrantCode grantCode, LiveAttachment attachment) {
            super(tokenAddress, amount, grantCode, attachment);
            this.tokenAddress = tokenAddress.getValue();
            this.amount = amount.getValue();
            this.grantCode = grantCode;
            this.attachment = attachment;
        }
    }

    public static class ClaimData extends DynamicStruct {
        public BigInteger lotteryId;

        public BigInteger tokenId;

        public Bonus bonus;

        public String handleOwner;

        public LiveGrantCode grantCode;

        public LiveAttachment attachment;

        public ClaimData(BigInteger lotteryId, BigInteger tokenId, Bonus bonus, String handleOwner, LiveGrantCode grantCode, LiveAttachment attachment) {
            super(new org.web3j.abi.datatypes.generated.Uint256(lotteryId), 
                    new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                    bonus, 
                    new org.web3j.abi.datatypes.Address(handleOwner), 
                    grantCode, 
                    attachment);
            this.lotteryId = lotteryId;
            this.tokenId = tokenId;
            this.bonus = bonus;
            this.handleOwner = handleOwner;
            this.grantCode = grantCode;
            this.attachment = attachment;
        }

        public ClaimData(Uint256 lotteryId, Uint256 tokenId, Bonus bonus, Address handleOwner, LiveGrantCode grantCode, LiveAttachment attachment) {
            super(lotteryId, tokenId, bonus, handleOwner, grantCode, attachment);
            this.lotteryId = lotteryId.getValue();
            this.tokenId = tokenId.getValue();
            this.bonus = bonus;
            this.handleOwner = handleOwner.getValue();
            this.grantCode = grantCode;
            this.attachment = attachment;
        }
    }

    public static class CreateProfileData extends DynamicStruct {
        public String to;

        public String handle;

        public String metadataUri;

        public LiveGrantCode grantCode;

        public LiveAttachment attachment;

        public CreateProfileData(String to, String handle, String metadataUri, LiveGrantCode grantCode, LiveAttachment attachment) {
            super(new org.web3j.abi.datatypes.Address(to), 
                    new org.web3j.abi.datatypes.Utf8String(handle), 
                    new org.web3j.abi.datatypes.Utf8String(metadataUri), 
                    grantCode, 
                    attachment);
            this.to = to;
            this.handle = handle;
            this.metadataUri = metadataUri;
            this.grantCode = grantCode;
            this.attachment = attachment;
        }

        public CreateProfileData(Address to, Utf8String handle, Utf8String metadataUri, LiveGrantCode grantCode, LiveAttachment attachment) {
            super(to, handle, metadataUri, grantCode, attachment);
            this.to = to.getValue();
            this.handle = handle.getValue();
            this.metadataUri = metadataUri.getValue();
            this.grantCode = grantCode;
            this.attachment = attachment;
        }
    }

    public static class DeployTicketData extends DynamicStruct {
        public TicketCommonData ticketCommonData;

        public LiveGrantCode grantCode;

        public LiveAttachment attachment;

        public DeployTicketData(TicketCommonData ticketCommonData, LiveGrantCode grantCode, LiveAttachment attachment) {
            super(ticketCommonData, 
                    grantCode, 
                    attachment);
            this.ticketCommonData = ticketCommonData;
            this.grantCode = grantCode;
            this.attachment = attachment;
        }
    }

    public static class DrawData extends DynamicStruct {
        public BigInteger lotteryId;

        public List<Bonus> bonuses;

        public String metadataUri;

        public LiveGrantCode grantCode;

        public LiveAttachment attachment;

        public DrawData(BigInteger lotteryId, List<Bonus> bonuses, String metadataUri, LiveGrantCode grantCode, LiveAttachment attachment) {
            super(new org.web3j.abi.datatypes.generated.Uint256(lotteryId), 
                    new org.web3j.abi.datatypes.DynamicArray<Bonus>(Bonus.class, bonuses), 
                    new org.web3j.abi.datatypes.Utf8String(metadataUri), 
                    grantCode, 
                    attachment);
            this.lotteryId = lotteryId;
            this.bonuses = bonuses;
            this.metadataUri = metadataUri;
            this.grantCode = grantCode;
            this.attachment = attachment;
        }

        public DrawData(Uint256 lotteryId, @Parameterized(type = Bonus.class) DynamicArray<Bonus> bonuses, Utf8String metadataUri, LiveGrantCode grantCode, LiveAttachment attachment) {
            super(lotteryId, bonuses, metadataUri, grantCode, attachment);
            this.lotteryId = lotteryId.getValue();
            this.bonuses = bonuses.getValue();
            this.metadataUri = metadataUri.getValue();
            this.grantCode = grantCode;
            this.attachment = attachment;
        }
    }

    public static class HandleReplaceData extends DynamicStruct {
        public BigInteger tokenId;

        public String newHandle;

        public String newMetadataUri;

        public LiveGrantCode grantCode;

        public LiveAttachment attachment;

        public HandleReplaceData(BigInteger tokenId, String newHandle, String newMetadataUri, LiveGrantCode grantCode, LiveAttachment attachment) {
            super(new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                    new org.web3j.abi.datatypes.Utf8String(newHandle), 
                    new org.web3j.abi.datatypes.Utf8String(newMetadataUri), 
                    grantCode, 
                    attachment);
            this.tokenId = tokenId;
            this.newHandle = newHandle;
            this.newMetadataUri = newMetadataUri;
            this.grantCode = grantCode;
            this.attachment = attachment;
        }

        public HandleReplaceData(Uint256 tokenId, Utf8String newHandle, Utf8String newMetadataUri, LiveGrantCode grantCode, LiveAttachment attachment) {
            super(tokenId, newHandle, newMetadataUri, grantCode, attachment);
            this.tokenId = tokenId.getValue();
            this.newHandle = newHandle.getValue();
            this.newMetadataUri = newMetadataUri.getValue();
            this.grantCode = grantCode;
            this.attachment = attachment;
        }
    }

    public static class MintTicketData extends DynamicStruct {
        public String to;

        public String ticketAddress;

        public String handle;

        public String metadataUri;

        public LiveGrantCode grantCode;

        public LiveAttachment attachment;

        public MintTicketData(String to, String ticketAddress, String handle, String metadataUri, LiveGrantCode grantCode, LiveAttachment attachment) {
            super(new org.web3j.abi.datatypes.Address(to), 
                    new org.web3j.abi.datatypes.Address(ticketAddress), 
                    new org.web3j.abi.datatypes.Utf8String(handle), 
                    new org.web3j.abi.datatypes.Utf8String(metadataUri), 
                    grantCode, 
                    attachment);
            this.to = to;
            this.ticketAddress = ticketAddress;
            this.handle = handle;
            this.metadataUri = metadataUri;
            this.grantCode = grantCode;
            this.attachment = attachment;
        }

        public MintTicketData(Address to, Address ticketAddress, Utf8String handle, Utf8String metadataUri, LiveGrantCode grantCode, LiveAttachment attachment) {
            super(to, ticketAddress, handle, metadataUri, grantCode, attachment);
            this.to = to.getValue();
            this.ticketAddress = ticketAddress.getValue();
            this.handle = handle.getValue();
            this.metadataUri = metadataUri.getValue();
            this.grantCode = grantCode;
            this.attachment = attachment;
        }
    }

    public static class ConsumeData extends DynamicStruct {
        public String toAddress;

        public BigInteger feeLevel;

        public BuyData buyData;

        public ConsumeData(String toAddress, BigInteger feeLevel, BuyData buyData) {
            super(new org.web3j.abi.datatypes.Address(toAddress), 
                    new org.web3j.abi.datatypes.generated.Uint256(feeLevel), 
                    buyData);
            this.toAddress = toAddress;
            this.feeLevel = feeLevel;
            this.buyData = buyData;
        }

        public ConsumeData(Address toAddress, Uint256 feeLevel, BuyData buyData) {
            super(toAddress, feeLevel, buyData);
            this.toAddress = toAddress.getValue();
            this.feeLevel = feeLevel.getValue();
            this.buyData = buyData;
        }
    }

    public static class AdminChangedEventResponse extends BaseEventResponse {
        public String previousAdmin;

        public String newAdmin;
    }

    public static class BeaconUpgradedEventResponse extends BaseEventResponse {
        public String beacon;
    }

    public static class InitializedEventResponse extends BaseEventResponse {
        public BigInteger version;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class PausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class UnpausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class UpgradedEventResponse extends BaseEventResponse {
        public String implementation;
    }
}
